var searchIndex = {};
searchIndex["amethyst"] = {"doc":"Amethyst is a free and open source game engine written in idiomatic [Rust][rs] for building video games and interactive multimedia applications. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[3,"Application","amethyst","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place.",null,null],[12,"world","","The world",0,null],[3,"ApplicationBuilder","","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created.",null,null],[12,"world","","Used by bundles to access the world directly",1,null],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[4,"Error","","Common error type.",null,null],[13,"Application","","Application error.",2,null],[13,"Config","","Asset management error. Configuration error.",2,null],[13,"Core","","Core error.",2,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",3,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",3,null],[13,"Push","","Pause the active state and push a new state onto the stack.",3,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",3,null],[13,"Quit","","Stop and remove all states and shut down the engine.",3,null],[0,"prelude","","Contains common types that can be glob-imported (`*`) for convenience.",null,null],[8,"Config","amethyst::prelude","Trait implemented by the `config!` macro.",null,null],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",4,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[10,"load_no_fallback","","Loads a configuration structure from a file.",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"write","","Writes a configuration structure to a file.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[3,"World","","The `World` struct contains the component storages and other resources.",null,null],[12,"res","","The resources used for this world.",5,null],[3,"Application","","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place.",null,null],[12,"world","","The world",0,null],[3,"ApplicationBuilder","","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created.",null,null],[12,"world","","Used by bundles to access the world directly",1,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",3,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",3,null],[13,"Push","","Pause the active state and push a new state onto the stack.",3,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",3,null],[13,"Quit","","Stop and remove all states and shut down the engine.",3,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",6,{"inputs":[{"name":"self"},{"name":"world"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":{"name":"trans"}}],[11,"fmt","amethyst","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Application with the given initial game state. This will create and allocate all the needed resources for the event loop of the game engine. It is a shortcut for convenience if you need more control over how the engine is configured you should be using build instead.",0,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"build","","Creates a new ApplicationBuilder with the given initial game state.",0,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"run","","Run the gameloop until the game state indicates that the game is no longer running. This is done via the `State` returning `Trans::Quit` or `Trans::Pop` on the last state in from the stack. See full documentation on this in State documentation.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new ApplicationBuilder instance that wraps the initial_state. This is the more verbose way of initializing your application if you require specific configuration details to be changed away from the default.",1,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"result"}}],[11,"register","","Registers a component into the entity-component-system. This method takes no options other than the component type which is defined using a 'turbofish'. See the example for what this looks like.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with_resource","","Adds the supplied ECS resource which can be accessed from game systems.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"with_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with","","Adds a given system to the game loop.",1,null],[11,"with_thread_local","","Add a given thread-local system to the game loop.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_local","","Add a local `RunNow` system.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_bundle","","Add a given ECS bundle to the game loop.",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"with_source","","Register an asset store with the loader logic of the Application.",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_frame_limit","","Sets the maximum frames per second of this game.",1,{"inputs":[{"name":"self"},{"name":"frameratelimitstrategy"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_frame_limit_config","","Sets the maximum frames per second of this game, based on the given config.",1,{"inputs":[{"name":"self"},{"name":"frameratelimitconfig"}],"output":{"name":"self"}}],[11,"with_fixed_step_length","","Sets the duration between fixed updates, defaults to one sixtieth of a second.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"ignore_window_close","","Tells the resulting application window to ignore close events if ignore is true. This will make your game window unresponsive to operating system close commands. Use with caution.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"register_asset","","Register a new asset type with the Application. All required components related to the storage of this asset type will be registered. Since Amethyst uses AssetFutures to allow for async content loading, Amethyst needs to have a system that translates AssetFutures into Components as they resolve. Amethyst registers a system to accomplish this.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","Build an `Application` object using the `ApplicationBuilder` as configured.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"on_start","amethyst::prelude","Executed when the game state begins.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",6,{"inputs":[{"name":"self"},{"name":"world"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":{"name":"trans"}}],[11,"fmt","amethyst","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new state machine with the given initial state.",7,{"inputs":[{"name":"s"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.",7,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"handle_event","","Passes a single event to the active state to handle.",7,{"inputs":[{"name":"self"},{"name":"world"},{"name":"event"}],"output":null}],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",7,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"update","","Updates the currently active state immediately.",7,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[6,"Result","","Engine result type.",null,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","amethyst::prelude","Executed when the game state begins.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",6,{"inputs":[{"name":"self"},{"name":"world"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",6,{"inputs":[{"name":"self"},{"name":"world"}],"output":{"name":"trans"}}],[11,"borrow","","",5,{"inputs":[{"name":"self"}],"output":{"name":"resources"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"world"}}],[11,"new","","Creates a new empty `World`.",5,{"inputs":[],"output":{"name":"world"}}],[11,"register","","Registers a new component.",5,null],[11,"register_with_id","","Registers a new component with a given id.",5,null],[11,"add_resource","","Adds a resource with the default ID (`0`).",5,null],[11,"add_resource_with_id","","Adds a resource with a given ID.",5,null],[11,"read","","Fetches a component's storage with the default id for reading.",5,{"inputs":[{"name":"self"}],"output":{"name":"storage"}}],[11,"write","","Fetches a component's storage with the default id for writing.",5,{"inputs":[{"name":"self"}],"output":{"name":"storage"}}],[11,"read_with_id","","Fetches a component's storage with a specified id for reading.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"storage"}}],[11,"write_with_id","","Fetches a component's storage with a specified id for writing.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"storage"}}],[11,"read_resource_with_id","","Fetches a resource with a specified id for reading.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"fetch"}}],[11,"write_resource_with_id","","Fetches a resource with a specified id for writing.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"fetchmut"}}],[11,"read_resource","","Fetches a resource with the default id for reading.",5,{"inputs":[{"name":"self"}],"output":{"name":"fetch"}}],[11,"write_resource","","Fetches a resource with the default id for writing.",5,{"inputs":[{"name":"self"}],"output":{"name":"fetchmut"}}],[11,"entities","","Convenience method for fetching entities.",5,{"inputs":[{"name":"self"}],"output":{"name":"fetch"}}],[11,"create_entity","","Allows building an entity with its components.",5,{"inputs":[{"name":"self"}],"output":{"name":"entitybuilder"}}],[11,"create_iter","","Returns an iterator for entity creation. This makes it easy to create a whole collection of them.",5,{"inputs":[{"name":"self"}],"output":{"name":"createiter"}}],[11,"delete_entity","","Deletes an entity and its components.",5,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"result"}}],[11,"delete_entities","","Deletes the specified entities and their components.",5,null],[11,"delete_all","","Deletes all entities and their components.",5,null],[11,"is_alive","","Checks if an entity is alive. Please note that atomically created or deleted entities (the ones created / deleted with the `Entities` struct) are not handled by this method. Therefore, you should have called `maintain()` before using this method.",5,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"maintain","","Merges in the appendix, recording all the dynamically created and deleted entities into the persistent generations vector. Also removes all the abandoned components.",5,null]],"paths":[[3,"Application"],[3,"ApplicationBuilder"],[4,"Error"],[4,"Trans"],[8,"Config"],[3,"World"],[8,"State"],[3,"StateMachine"]]};
searchIndex["amethyst_animation"] = {"doc":"","items":[[3,"AnimationBundle","amethyst_animation","Bundle for a complete animation setup including sampler interpolation and animation control.",null,null],[3,"SamplingBundle","","Bundle for only the sampler interpolation.",null,null],[3,"Animation","","Defines a single animation. Defines relationships between the node index in `AnimationHierarchy` and a `Sampler` handle. If the animation only targets a single node index, `AnimationHierarchy` is not required.",null,null],[12,"nodes","","node index -> sampler handle",0,null],[3,"AnimationControl","","Attaches to an entity, to control what animations are currently active",null,null],[12,"animation","","Animation handle",1,null],[12,"end","","What to do when animation ends",1,null],[12,"state","","State of animation",1,null],[12,"command","","Animation command",1,null],[3,"AnimationHierarchy","","Defines the hierarchy of nodes that a single animation can control. Attach to the root entity that an animation can be defined for. Only required for animations which targets more than a single node.",null,null],[12,"nodes","","",2,null],[3,"AnimationSet","","Attaches to an entity that have animations, with links to all animations that can be run on the entity. Is not used directly by the animation systems, provided for convenience.",null,null],[12,"animations","","",3,null],[3,"Sampler","","Sampler defines a single animation for a single attribute of the `LocalTransform` of the entity it is attached to.",null,null],[12,"input","","Time of key frames",4,null],[12,"output","","Actual output data to interpolate",4,null],[12,"ty","","How should interpolation be done",4,null],[3,"SamplerControl","","Run the sampler on the attached entity",null,null],[12,"sampler","","Sampler",5,null],[12,"state","","State of sampling",5,null],[12,"end","","What to do when sampler ends",5,null],[12,"after","","What the transform should return to after end",5,null],[3,"SamplerControlSet","","Sampler control set, containing optional samplers for each of the possible channels.",null,null],[12,"translation","","",6,null],[12,"rotation","","",6,null],[12,"scale","","",6,null],[3,"AnimationControlSystem","","System for setting up animations, should run before `SamplerInterpolationSystem`.",null,null],[3,"SamplerInterpolationSystem","","System for interpolating active samplers.",null,null],[4,"InterpolationType","","Supported interpolation functions",null,null],[13,"Linear","","Linear interpolation",7,null],[13,"SphericalLinear","","Spherical linear interpolation",7,null],[13,"Step","","Step interpolation",7,null],[13,"CatmullRomSpline","","Catmull-Rom spline interpolation",7,null],[13,"CubicSpline","","Cubic Hermite spline interpolation",7,null],[4,"AnimationCommand","","Animation command",null,null],[13,"Start","","Start the animation, or unpause if it's paused",8,null],[13,"Pause","","Pause the animation",8,null],[13,"Abort","","Abort the animation, will cause the control object to be removed from the world",8,null],[4,"AnimationOutput","","The actual animation data for a single attribute",null,null],[13,"Translation","","Translation is a 3d vector",9,null],[13,"Rotation","","Rotation is a quaternion",9,null],[13,"Scale","","Scale is a 3d vector",9,null],[4,"ControlState","","State of animation",null,null],[13,"Requested","","Animation was just requested, not started yet",10,null],[13,"Running","","Animation is running, contains last animation tick, and accumulated duration",10,null],[13,"Paused","","Animation is paused at the accumulated duration",10,null],[13,"Abort","","Request termination of the animation",10,null],[13,"Done","","Animation is completed",10,null],[4,"EndControl","","Control handling of animation/sampler end",null,null],[13,"Loop","","Loop the requested number of iterations, None = loop infinitely",11,null],[13,"Normal","","When duration of sampler/animation is reached, go back to rest state",11,null],[4,"RestState","","The rest state for a single attribute",null,null],[13,"Translation","","Translation is a 3d vector",12,null],[13,"Rotation","","Rotation is a quaternion",12,null],[13,"Scale","","Scale is a 3d vector",12,null],[5,"play_animation","","Play a given animation on the given entity.",null,{"inputs":[{"name":"writestorage"},{"name":"handle"},{"name":"entity"},{"name":"endcontrol"}],"output":null}],[5,"pause_animation","","Pause the running animation on the given entity.",null,{"inputs":[{"name":"writestorage"},{"name":"handle"},{"name":"entity"}],"output":null}],[5,"toggle_animation","","Toggle the state between paused and running for the given animation on the given entity.",null,{"inputs":[{"name":"writestorage"},{"name":"handle"},{"name":"entity"},{"name":"endcontrol"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"animationoutput"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"animationhierarchy"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"animation"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"controlstate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"controlstate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"controlstate"}],"output":{"name":"bool"}}],[11,"is_running","","Is the state `Running`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_paused","","Is the state `Paused`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"reststate"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"endcontrol"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"samplercontrol"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"samplercontrolset"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"samplercontrolset"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"animationcommand"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"samplerinterpolationsystem"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"run","","",13,null],[11,"default","","",14,{"inputs":[],"output":{"name":"animationcontrolsystem"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"run","","",14,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"interpolationtype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"interpolationtype"}],"output":{"name":"bool"}}],[11,"interpolate","","",7,null],[11,"interpolate","","",7,null],[11,"default","","",15,{"inputs":[],"output":{"name":"samplingbundle"}}],[11,"new","","Create a new sampling bundle",15,{"inputs":[],"output":{"name":"self"}}],[11,"with_dep","","Set dependencies for the `SamplerInterpolationSystem`",15,null],[11,"build","","",15,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"animationbundle"}}],[11,"new","","Create a new animation bundle",16,{"inputs":[],"output":{"name":"self"}}],[11,"with_dep","","Set dependencies for the `AnimationControlSystem`",16,null],[11,"build","","",16,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[6,"AnimationProcessor","","Asset storage processor for `Animation`",null,null],[6,"SamplerProcessor","","Asset storage processor for `Sampler`",null,null],[8,"Interpolate","","Interpolate over data set of the given type.",null,null],[10,"interpolate","","Interpolation function, `f(input) -> T`",17,null],[8,"InterpolationFunction","","Trait used if an outside user wants to supply their own interpolation function",null,null]],"paths":[[3,"Animation"],[3,"AnimationControl"],[3,"AnimationHierarchy"],[3,"AnimationSet"],[3,"Sampler"],[3,"SamplerControl"],[3,"SamplerControlSet"],[4,"InterpolationType"],[4,"AnimationCommand"],[4,"AnimationOutput"],[4,"ControlState"],[4,"EndControl"],[4,"RestState"],[3,"SamplerInterpolationSystem"],[3,"AnimationControlSystem"],[3,"SamplingBundle"],[3,"AnimationBundle"],[8,"Interpolate"]]};
searchIndex["amethyst_assets"] = {"doc":"amethyst_assets","items":[[3,"FormatValue","amethyst_assets","The `Ok` return value of `Format::import` for a given asset type `A`.",null,null],[12,"data","","The format data.",0,null],[12,"reload","","An optional reload structure",0,null],[3,"Cache","","A simple cache for asset handles of type `A`. This stores `WeakHandle`, so it doesn't keep the assets alive.",null,null],[3,"Error","","The Error type.",null,null],[12,"0","","The kind of the error.",1,null],[3,"Loader","","The asset loader, holding the sources and a reference to the `ThreadPool`.",null,null],[3,"ProgressCounter","","A progress tracker which is passed to the `Loader` in order to check how many assets are loaded.",null,null],[3,"HotReloadBundle","","This bundle activates hot reload for the `Loader`, adds a `HotReloadStrategy` and the `HotReloadSystem`.",null,null],[3,"HotReloadStrategy","","An ECS resource which allows to configure hot reloading.",null,null],[3,"HotReloadSystem","","System for updating `HotReloadStrategy`.",null,null],[3,"SingleFile","","An implementation of `Reload` which just stores the modification time and the path of the file.",null,null],[3,"Directory","","Directory source.",null,null],[3,"AssetStorage","","An asset storage, storing the actual assets and allocating handles to them.",null,null],[3,"Handle","","A handle to an asset. This is usually what the user deals with, the actual asset (`A`) is stored in an `AssetStorage`.",null,null],[3,"Processor","","A default implementation for an asset processing system which converts data to assets and maintains the asset storage for `A`.",null,null],[3,"WeakHandle","","A weak handle, which is useful if you don't directly need the asset like in caches. This way, the asset can still get dropped (if you want that).",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[13,"FromUtf8","","Wraps a UTF-8 error",2,null],[13,"Utf8","","Wraps a UTF-8 error",2,null],[13,"Asset","","Returned if an asset with a given name failed to load.",2,null],[13,"Source","","Returned if a source could not retrieve something.",2,null],[13,"Format","","Returned if a format failed to load the asset data.",2,null],[4,"Completion","","Completion status, returned by `ProgressCounter::complete`.",null,null],[13,"Complete","","Loading is complete",3,null],[13,"Failed","","Some asset loads have failed",3,null],[13,"Loading","","Still loading assets",3,null],[11,"data","","Creates a `FormatValue` from only the data (setting `reload` to `None`).",0,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new `Cache` and initializes it with the default values.",4,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Inserts an asset with a given `key` and returns the old value (if any).",4,{"inputs":[{"name":"self"},{"name":"k"},{"name":"handle"}],"output":{"name":"option"}}],[11,"get","","Retrieves an asset handle using a given `key`.",4,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"clear_dead","","Deletes all cached handles which are invalid.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","Clears all values.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",1,null],[11,"with_chain","","",1,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",1,null],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",1,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",1,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","Creates a new asset loader, initializing the directory store with the given path.",5,{"inputs":[{"name":"p"},{"name":"arc"}],"output":{"name":"self"}}],[11,"add_source","","Add a source to the `Loader`, given an id and the source.",5,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"set_hot_reload","","If set to `true`, this `Loader` will ask formats to generate \"reload instructions\" which allow reloading. Calling `set_hot_reload(true)` does not actually enable hot reloading; this is controlled by the `HotReloadStrategy` resource.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"load","","Loads an asset with a given format from the default (directory) source. If you want to load from a custom source instead, use `load_from`.",5,null],[11,"load_from","","Loads an asset with a given id and format from a custom source. The actual work is done in a worker thread, thus this method immediately returns a handle.",5,null],[11,"load_from_data","","Load an asset from data and return a handle.",5,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"completion"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"completion"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"progresscounter"}}],[11,"new","","Creates a new `Progress` struct.",6,{"inputs":[],"output":{"name":"self"}}],[11,"errors","","Removes all errors and returns them.",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"num_assets","","Returns the number of assets this struct is tracking.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_failed","","Returns the number of assets that have failed.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_loading","","Returns the number of assets that are still loading.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_finished","","Returns the number of assets this struct is tracking.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"complete","","Returns `Completion::Complete` if all tracked assets are finished.",6,{"inputs":[{"name":"self"}],"output":{"name":"completion"}}],[11,"is_complete","","Returns `true` if all assets have been imported without error.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"hotreloadbundle"}}],[11,"new","","Creates a new bundle.",7,{"inputs":[{"name":"hotreloadstrategy"}],"output":{"name":"self"}}],[11,"build","","",7,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[11,"every","","Causes hot reloads every `n` seconds.",8,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"when_triggered","","This allows to use `trigger` for hot reloading.",8,{"inputs":[],"output":{"name":"self"}}],[11,"never","","Never do any hot-reloading.",8,{"inputs":[],"output":{"name":"self"}}],[11,"trigger","","The frame after calling this, all changed assets will be reloaded. Doesn't do anything if the strategy wasn't created with `when_triggered`.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"run","","",9,null],[11,"new","","Creates a new `SingleFile` reload object.",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"needs_reload","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reload","","",10,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new directory storage.",11,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"modified","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"load","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new asset storage.",12,{"inputs":[],"output":{"name":"self"}}],[11,"clone_asset","","When cloning an asset handle, you'll get another handle, but pointing to the same asset. If you instead want to indeed create a new asset, you can use this method. Note however, that it needs a mutable borrow of `self`, so it can't be used in parallel.",12,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"option"}}],[11,"get","","Get an asset from a given asset handle.",12,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"option"}}],[11,"get_mut","","Get an asset mutably from a given asset handle.",12,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"option"}}],[11,"process","","Process finished asset data and maintain the storage.",12,{"inputs":[{"name":"self"},{"name":"f"},{"name":"u64"},{"name":"threadpool"},{"name":"option"}],"output":null}],[11,"process_custom_drop","","Process finished asset data and maintain the storage. This calls the `drop_fn` closure for assets that were removed from the storage.",12,{"inputs":[{"name":"self"},{"name":"f"},{"name":"d"},{"name":"u64"},{"name":"threadpool"},{"name":"option"}],"output":null}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new asset processor for assets of type `A`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"run","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,{"inputs":[{"name":"self"},{"name":"__ha"}],"output":null}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"id","","Return the 32 bit id of this handle.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"downgrade","","Downgrades the handle and creates a `WeakHandle`.",14,{"inputs":[{"name":"self"}],"output":{"name":"weakhandle"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"upgrade","","Tries to upgrade to a `Handle`.",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_dead","","Returns `true` if the original handle is dead.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"Asset","","One of the three core traits of this crate.",null,null],[16,"Data","","The `Data` type the asset can be created from.",16,null],[16,"HandleStorage","","The ECS storage type to be used. You'll want to use `VecStorage` in most cases.",16,null],[8,"Format","","A format, providing a conversion from bytes to asset data, which is then in turn accepted by `Asset::from_data`. Examples for formats are `Png`, `Obj` and `Wave`.",null,null],[18,"NAME","","A unique identifier for this format.",17,null],[16,"Options","","Options specific to the format, which are passed to `import`. E.g. for textures this would be stuff like mipmap levels and sampler info.",17,null],[10,"import","","Reads the given bytes and produces asset data.",17,null],[8,"SimpleFormat","","This is a simplified version of `Format`, which doesn't give you as much freedom, but in return is simpler to implement. All `SimpleFormat` types automatically implement `Format`. This format assumes that the asset name is the full path and the asset is only contained in one file.",null,null],[18,"NAME","","A unique identifier for this format.",18,null],[16,"Options","","Options specific to the format, which are passed to `import`. E.g. for textures this would be stuff like mipmap levels and sampler info.",18,null],[10,"import","","Produces asset data from given bytes.",18,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"Progress","","The `Progress` trait, allowing to track which assets are imported already.",null,null],[16,"Tracker","","The tracker this progress can create.",20,null],[10,"add_assets","","Add `num` assets to the progress. This should be done whenever a new asset is put in the queue.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"create_tracker","","Creates a `Tracker`.",20,null],[8,"Tracker","","The `Tracker` trait which will be used by the loader to report back to `Progress`.",null,null],[10,"success","","Called if the asset could be imported.",21,{"inputs":[{"name":"box"}],"output":null}],[10,"fail","","Called if the asset couldn't be imported to an error.",21,{"inputs":[{"name":"box"},{"name":"error"}],"output":null}],[8,"Reload","","The `Reload` trait provides a method which checks if an asset needs to be reloaded.",null,null],[10,"needs_reload","","Checks if a reload is necessary.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"name","","Returns the asset name.",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"format","","Returns the format name.",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"reload","","Reloads the asset.",22,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[8,"Source","","A trait for asset sources, which provides methods for loading bytes.",null,null],[10,"modified","","This is called to check if an asset has been modified.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"load","","Loads the bytes given a path.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"load_with_metadata","","Returns both the result of `load` and `modified` as a tuple. There's a default implementation which just calls both methods, but you may be able to provide a more optimized version yourself.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[18,"NAME","","A unique identifier for this format.",17,null],[18,"NAME","","A unique identifier for this format.",18,null],[11,"load_with_metadata","","Returns both the result of `load` and `modified` as a tuple. There's a default implementation which just calls both methods, but you may be able to provide a more optimized version yourself.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"FormatValue"],[3,"Error"],[4,"ErrorKind"],[4,"Completion"],[3,"Cache"],[3,"Loader"],[3,"ProgressCounter"],[3,"HotReloadBundle"],[3,"HotReloadStrategy"],[3,"HotReloadSystem"],[3,"SingleFile"],[3,"Directory"],[3,"AssetStorage"],[3,"Processor"],[3,"Handle"],[3,"WeakHandle"],[8,"Asset"],[8,"Format"],[8,"SimpleFormat"],[8,"ResultExt"],[8,"Progress"],[8,"Tracker"],[8,"Reload"],[8,"Source"]]};
searchIndex["amethyst_audio"] = {"doc":"Loading and playing of audio files.","items":[[3,"AudioBundle","amethyst_audio","Audio bundle",null,null],[3,"AudioEmitter","","An audio source, add this component to anything that emits sound.",null,null],[3,"AudioListener","","An audio listener, add this component to the local player character.",null,null],[12,"output","","Output used by this listener to emit sounds to",0,null],[12,"left_ear","","Position of the left_ear relative to the global transform on this entity.",0,null],[12,"right_ear","","Position of the right ear relative to the global transform on this entity.",0,null],[3,"FlacFormat","","Loads audio from Flac files.",null,null],[3,"OggFormat","","Loads audio from Ogg Vorbis files",null,null],[3,"WavFormat","","Loads audio from wav files.",null,null],[3,"AudioSink","","This structure provides a way to programmatically pick and play music.",null,null],[3,"Source","","A loaded audio file",null,null],[12,"bytes","","The bytes of this audio source.",1,null],[3,"AudioSystem","","Syncs 3D transform data with the audio engine to provide 3D audio.",null,null],[3,"DjSystem","","Calls a closure if the `AudioSink` is empty.",null,null],[3,"DecoderError","","An error occurred while decoding the source.",null,null],[0,"output","","Provides structures and functions used to get audio outputs.",null,null],[3,"Output","amethyst_audio::output","A speaker(s) through which audio can be played.",null,null],[3,"OutputIterator","","An iterator over outputs",null,null],[5,"default_output","","Get the default output, returns none if no outputs are available.",null,{"inputs":[],"output":{"name":"option"}}],[5,"outputs","","Get a list of outputs available to the system.",null,{"inputs":[],"output":{"name":"outputiterator"}}],[11,"name","","Gets the name of the output",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"try_play_once","","Play a sound once.  A volume of 1.0 is unchanged, while 0.0 is silent.",2,{"inputs":[{"name":"self"},{"name":"source"},{"name":"f32"}],"output":{"name":"result"}}],[11,"play_once","","Play a sound once. A volume of 1.0 is unchanged, while 0.0 is silent.",2,{"inputs":[{"name":"self"},{"name":"source"},{"name":"f32"}],"output":null}],[11,"play_n_times","","Play a sound n times. A volume of 1.0 is unchanged, while 0.0 is silent.",2,{"inputs":[{"name":"self"},{"name":"source"},{"name":"f32"},{"name":"u16"}],"output":null}],[11,"try_play_n_times","","Play a sound n times. A volume of 1.0 is unchanged, while 0.0 is silent.",2,{"inputs":[{"name":"self"},{"name":"source"},{"name":"f32"},{"name":"u16"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","amethyst_audio","",4,{"inputs":[{"name":"self"}],"output":{"name":"wavformat"}}],[11,"import","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"oggformat"}}],[11,"import","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flacformat"}}],[11,"import","","",6,null],[11,"new","","Creates a new Dj using the given audio output.",7,{"inputs":[{"name":"output"}],"output":{"name":"audiosink"}}],[11,"append","","Adds a source to the sink's queue of music to play.",7,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"result"}}],[11,"empty","","Returns true if the sink has no more music to play.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"volume","","Retrieves the volume of the sink, between 0.0 and 1.0;",7,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_volume","","Sets the volume of the sink.",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"play","","Resumes playback of a paused sink. Has no effect if this sink was never paused.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"pause","","Pauses playback, this can be resumed with `AudioSink::play`",7,{"inputs":[{"name":"self"}],"output":null}],[11,"is_paused","","Returns true if the sink is currently paused.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stop","","Empties the sink's queue of all music.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"as_ref","","",1,null],[11,"default","","",8,{"inputs":[],"output":{"name":"audioemitter"}}],[11,"new","","Creates a new AudioEmitter component initialized to the given positions. These positions will stay synced with Transform if the Transform component is available on this entity.",8,{"inputs":[],"output":{"name":"audioemitter"}}],[11,"play","","Plays an audio source from this emitter.",8,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"result"}}],[11,"set_picker","","An emitter's picker will be called by the AudioSystem whenever the emitter runs out of sounds to play.",8,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clear_picker","","Clears the previously set picker.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"audiosystem"}}],[11,"new","","Produces a new AudioSystem that uses the given listener.",9,{"inputs":[],"output":{"name":"audiosystem"}}],[11,"run","","",9,null],[11,"new","","Creates a new `DjSystem` with the music picker being `f`. The closure takes a parameter, which needs to be a reference to a resource type, e.g. `&MusicLibrary`. This resource will be fetched by the system and passed to the picker.",10,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"run","","",10,null],[11,"new","","Create a new DJ bundle",11,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_dep","","Set dependencies for the `DjSystem`",11,null],[11,"build","","",11,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[6,"SourceHandle","","A handle to a source asset.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"AudioListener"],[3,"Source"],[3,"Output"],[3,"OutputIterator"],[3,"WavFormat"],[3,"OggFormat"],[3,"FlacFormat"],[3,"AudioSink"],[3,"AudioEmitter"],[3,"AudioSystem"],[3,"DjSystem"],[3,"AudioBundle"],[3,"DecoderError"]]};
searchIndex["amethyst_config"] = {"doc":"Loads RON files into a structure for easy / statically typed usage.","items":[[4,"ConfigError","amethyst_config","Error related to anything that manages/creates configurations as well as \"workspace\"-related things.",null,null],[13,"File","","Forward to the `std::io::Error` error.",0,null],[13,"Parser","","Errors related to serde's parsing of configuration files.",0,null],[13,"Serializer","","Occurs if a value is ill-formed during serialization (like a poisoned mutex).",0,null],[13,"Extension","","Related to the path of the file.",0,null],[8,"Config","","Trait implemented by the `config!` macro.",null,null],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",1,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[10,"load_no_fallback","","Loads a configuration structure from a file.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"write","","Writes a configuration structure to a file.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"configerror"}}],[11,"from","","",0,{"inputs":[{"name":"deerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"sererror"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"ConfigError"],[8,"Config"]]};
searchIndex["amethyst_core"] = {"doc":"","items":[[0,"bundle","amethyst_core","",null,null],[3,"Error","amethyst_core::bundle","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"ECSBundle","","A bundle of ECS components, resources and systems.",null,null],[10,"build","","Build and add ECS resources, register components, add systems etc to the Application.",3,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"orientation","amethyst_core","Orientation of objects",null,null],[3,"Orientation","amethyst_core::orientation","Orientation struct.",null,null],[12,"forward","","Forward vector [x, y, z]",4,null],[12,"right","","Right vector [x, y, z]",4,null],[12,"up","","Up vector [x, y, z]",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[0,"transform","amethyst_core","`amethyst` transform ecs module",null,null],[0,"components","amethyst_core::transform","Components for the transform processor.",null,null],[3,"LocalTransform","amethyst_core::transform::components","Local position, rotation, and scale (from parent if it exists).",null,null],[12,"rotation","","Quaternion [w (scalar), x, y, z]",5,null],[12,"scale","","Scale vector [x, y, z]",5,null],[12,"translation","","Translation/position vector [x, y, z]",5,null],[3,"Parent","","Component for defining a parent entity.",null,null],[12,"entity","","The parent entity",6,null],[3,"Transform","","Performs a global transformation on the entity (transform from origin).",null,null],[12,"0","","",7,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"parent"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"parent"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"localtransform"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"localtransform"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"localtransform"}],"output":{"name":"bool"}}],[11,"look_at","","Rotate to look at a point in space (without rolling)",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"point3"}],"output":{"name":"self"}}],[11,"matrix","","Returns the local object matrix for the transform.",5,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"move_forward","","Move relatively to its current position and orientation.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"f32"}],"output":{"name":"self"}}],[11,"move_global","","Move relatively to its current position, but independently from its orientation. Ideally, first normalize the direction and then multiply it by whatever amount you want to move before passing the vector to this method",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"move_local","","Move relatively to its current position and orientation.",5,{"inputs":[{"name":"self"},{"name":"vector3"},{"name":"f32"}],"output":{"name":"self"}}],[11,"move_right","","Move relatively to its current position and orientation.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"f32"}],"output":{"name":"self"}}],[11,"move_up","","Move relatively to its current position and orientation.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"f32"}],"output":{"name":"self"}}],[11,"pitch_global","","Pitch relatively to the world.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"deg"}],"output":{"name":"self"}}],[11,"pitch_local","","Pitch relatively to its own rotation.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"deg"}],"output":{"name":"self"}}],[11,"roll_global","","Roll relatively to the world.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"deg"}],"output":{"name":"self"}}],[11,"roll_local","","Roll relatively to its own rotation.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"deg"}],"output":{"name":"self"}}],[11,"rotate","","Add a rotation to the current rotation",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"self"}}],[11,"rotate_global","","Rotate relatively to the world",5,{"inputs":[{"name":"self"},{"name":"vector3"},{"name":"deg"}],"output":{"name":"self"}}],[11,"rotate_local","","Rotate relatively to the current orientation",5,{"inputs":[{"name":"self"},{"name":"vector3"},{"name":"deg"}],"output":{"name":"self"}}],[11,"set_position","","Set the position.",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"set_rotation","","Set the rotation using Euler x, y, z.",5,{"inputs":[{"name":"self"},{"name":"d"},{"name":"d"},{"name":"d"}],"output":{"name":"self"}}],[11,"to_view_matrix","","Calculate the view matrix from the given data.",5,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"matrix4"}}],[11,"yaw_global","","Yaw relatively to the world.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"deg"}],"output":{"name":"self"}}],[11,"yaw_local","","Yaw relatively to its own rotation.",5,{"inputs":[{"name":"self"},{"name":"orientation"},{"name":"deg"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new `LocalTransform`.",5,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"look_at","","",5,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"transform_vector","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",5,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_transform","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_finite","","Checks whether each `f32` of the `Transform` is finite (not NaN or inf).",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new `Transform` in the form of an identity matrix.",7,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",7,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"borrow","","",7,null],[0,"systems","amethyst_core::transform","Scene graph system and types",null,null],[3,"TransformSystem","amethyst_core::transform::systems","Handles updating `Transform` components based on the `LocalTransform` component and parents.",null,null],[11,"default","","",8,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"new","","Creates a new transform processor.",8,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"run","","",8,null],[0,"bundle","amethyst_core::transform","ECS transform bundle",null,null],[3,"TransformBundle","amethyst_core::transform::bundle","Transform bundle",null,null],[11,"default","","",9,{"inputs":[],"output":{"name":"transformbundle"}}],[11,"new","","Create a new transform bundle",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_dep","","Set dependencies for the `TransformSystem`",9,null],[11,"build","","",9,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[0,"timing","amethyst_core","Utilities for working with time.",null,null],[3,"Time","amethyst_core::timing","Frame timing values.",null,null],[12,"last_fixed_update","","Time at which `State::fixed_update` was last called.",10,null],[4,"Stopwatch","","A stopwatch which accurately measures elapsed time.",null,null],[13,"Waiting","","Initial state with an elapsed time value of 0 seconds.",11,null],[13,"Started","","Stopwatch has started counting the elapsed time since this `Instant` and accumuluated time from previous start/stop cycles `Duration`.",11,null],[13,"Ended","","Stopwatch has been stopped and reports the elapsed time `Duration`.",11,null],[5,"duration_to_secs","","Converts a Duration to the time in seconds.",null,{"inputs":[{"name":"duration"}],"output":{"name":"f32"}}],[5,"duration_to_secs_f64","","Converts a Duration to the time in seconds in an f64.",null,{"inputs":[{"name":"duration"}],"output":{"name":"f64"}}],[5,"secs_to_duration","","Converts a time in seconds to a duration",null,{"inputs":[{"name":"f32"}],"output":{"name":"duration"}}],[5,"duration_to_nanos","","Converts a Duration to nanoseconds",null,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[5,"nanos_to_duration","","Converts nanoseconds to a Duration",null,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"delta_seconds","","Gets the time difference between frames in seconds.",10,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"delta_time","","Gets the time difference between frames.",10,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"delta_real_seconds","","Gets the time difference between frames in seconds ignoring the time speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"delta_real_time","","Gets the time difference between frames ignoring the time speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fixed_seconds","","Gets the fixed time step in seconds.",10,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fixed_time","","Gets the fixed time step.",10,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"frame_number","","Gets the current frame number.  This increments by 1 every frame.  There is no frame 0.",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"last_fixed_update","","Gets the time at which the last fixed update was called.",10,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"absolute_time","","Gets the time since the start of the game, taking into account the speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"absolute_time_seconds","","Gets the time since the start of the game as seconds, taking into account the speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"absolute_real_time","","Gets the time since the start of the game, ignoring the speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"absolute_real_time_seconds","","Gets the time since the start of the game as seconds, ignoring the speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"time_scale","","Gets the current time speed multiplier.",10,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_delta_seconds","","Gets the total number of frames that have been played in this session. Sets both `delta_seconds` and `delta_time` based on the seconds given.",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_delta_time","","Sets both `delta_time` and `delta_seconds` based on the duration given.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"set_fixed_seconds","","Sets both `fixed_seconds` and `fixed_time` based on the seconds given.",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_fixed_time","","Sets both `fixed_time` and `fixed_seconds` based on the duration given.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"increment_frame_number","","Increments the current frame number by 1.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_time_scale","","Sets the time multiplier that affects how time values are computed, effectively slowing or speeding up your game.",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"finish_fixed_update","","Indicates a fixed update just finished.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"time"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stopwatch"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"new","","Creates a new stopwatch.",11,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",11,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been started and stopped before, the new results are compounded onto the existing elapsed time value.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops measuring elapsed time.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Clears the current elapsed time value.",11,{"inputs":[{"name":"self"}],"output":null}],[0,"frame_limiter","amethyst_core","Frame limiter",null,null],[3,"FrameRateLimitConfig","amethyst_core::frame_limiter","Frame limit config",null,null],[3,"FrameLimiter","","Frame limiter",null,null],[4,"FrameRateLimitStrategy","","Frame rate limiting strategy",null,null],[13,"Unlimited","","No limit, will do a single yield, and then continue with the next frame",12,null],[13,"Yield","","Use yield until the full frame duration has passed",12,null],[13,"Sleep","","Use sleep until the full frame duration has passed",12,null],[13,"SleepAndYield","","Use sleep and yield combined, will use sleep strategy until the given duration remains, and then swap to yield strategy.",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"frameratelimitstrategy"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"frameratelimitconfig"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new frame limiter with the given config",14,{"inputs":[{"name":"frameratelimitstrategy"},{"name":"u32"}],"output":{"name":"self"}}],[11,"set_rate","","Set the strategy and fps",14,{"inputs":[{"name":"self"},{"name":"frameratelimitstrategy"},{"name":"u32"}],"output":null}],[11,"from_config","","Create a new frame limiter with the given config",14,{"inputs":[{"name":"frameratelimitconfig"}],"output":{"name":"self"}}],[11,"start","","Start the limiter",14,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Wait until the frame has passed",14,{"inputs":[{"name":"self"}],"output":null}],[6,"ThreadPool","amethyst_core","A rayon thread pool wrapped in an `Arc`. This should be used as resource in `World`.",null,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ECSBundle"],[3,"Orientation"],[3,"LocalTransform"],[3,"Parent"],[3,"Transform"],[3,"TransformSystem"],[3,"TransformBundle"],[3,"Time"],[4,"Stopwatch"],[4,"FrameRateLimitStrategy"],[3,"FrameRateLimitConfig"],[3,"FrameLimiter"]]};
searchIndex["amethyst_gltf"] = {"doc":"","items":[[3,"GltfSceneFormat","amethyst_gltf","Gltf scene format, will cause the whole default scene to be loaded from the given file.",null,null],[3,"GltfSceneLoaderSystem","","A GLTF scene loader, will transform `Handle<GltfSceneAsset>` into full entity hierarchies.",null,null],[3,"GltfPrimitive","","A single graphics primitive",null,null],[12,"primitive","","",0,null],[12,"material","","",0,null],[12,"indices","","",0,null],[12,"attributes","","",0,null],[12,"handle","","",0,null],[3,"GltfMaterial","","GLTF material, PBR based",null,null],[3,"GltfTexture","","A GLTF defined texture, will be in `TextureData` format in the output from the loader.",null,null],[12,"data","","",1,null],[12,"handle","","",1,null],[3,"GltfNode","","A node in the scene hierarchy",null,null],[12,"primitives","","",2,null],[12,"parent","","",2,null],[12,"children","","",2,null],[12,"local_transform","","",2,null],[3,"GltfScene","","A single scene is defined as a list of the root nodes in the node hierarchy for the full asset",null,null],[12,"root_nodes","","",3,null],[3,"GltfAnimation","","A single animation",null,null],[12,"nodes","","",4,null],[12,"samplers","","",4,null],[12,"handle","","",4,null],[3,"GltfSceneOptions","","Options used when loading a GLTF file",null,null],[12,"generate_tex_coords","","",5,null],[12,"load_animations","","",5,null],[3,"GltfSceneAsset","","Actual asset produced on finished loading of a GLTF scene file.",null,null],[12,"nodes","","",6,null],[12,"scenes","","",6,null],[12,"materials","","",6,null],[12,"animations","","",6,null],[12,"default_scene","","",6,null],[12,"options","","",6,null],[4,"AlphaMode","","Alpha mode for material",null,null],[13,"Opaque","","",7,null],[13,"Mask","","",7,null],[13,"Blend","","",7,null],[11,"import","","",8,{"inputs":[{"name":"self"},{"name":"string"},{"name":"arc"},{"name":"gltfsceneoptions"},{"name":"bool"}],"output":{"name":"assetresult"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"run","","",9,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"texturedata"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gltfsceneoptions"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"gltfsceneoptions"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"GltfPrimitive"],[3,"GltfTexture"],[3,"GltfNode"],[3,"GltfScene"],[3,"GltfAnimation"],[3,"GltfSceneOptions"],[3,"GltfSceneAsset"],[4,"AlphaMode"],[3,"GltfSceneFormat"],[3,"GltfSceneLoaderSystem"],[3,"GltfMaterial"]]};
searchIndex["amethyst_input"] = {"doc":"","items":[[3,"Axis","amethyst_input","Represents an emulated analogue axis made up of digital inputs, like W and S or A and D. Two of these could be analogous to a DPAD.",null,null],[12,"pos","","Positive button, when pressed down axis value will return 1 if `neg` is not pressed down.",0,null],[12,"neg","","Negative button, when pressed down axis value will return -1 if `pos` is not pressed down.",0,null],[3,"Bindings","","Used for saving and loading input settings.",null,null],[3,"InputBundle","","Bundle for adding the `InputHandler`.",null,null],[3,"InputHandler","","This struct holds state information about input devices.",null,null],[12,"bindings","","Maps inputs to actions and axes.",1,null],[3,"InputSystem","","Input system",null,null],[3,"Buttons","","An iterator over buttons",null,null],[4,"Button","","A Button is any kind of digital input that the engine supports.",null,null],[13,"Key","","Virtual Keyboard keys, use this when the letter on the key matters more than the position of the key.",2,null],[13,"ScanCode","","Scan code from keyboard, use this when the position of the key matters more than letter on the key.",2,null],[13,"Mouse","","Mouse buttons",2,null],[4,"InputEvent","","Events generated by the input system",null,null],[13,"KeyPressed","","A key was pressed down, sent exactly once per key press.",3,null],[12,"key_code","amethyst_input::InputEvent","",3,null],[12,"scancode","","",3,null],[13,"KeyReleased","amethyst_input","A key was released, sent exactly once per key release.",3,null],[12,"key_code","amethyst_input::InputEvent","",3,null],[12,"scancode","","",3,null],[13,"KeyTyped","amethyst_input","A unicode character was received by the window.  Good for typing.",3,null],[13,"MouseButtonPressed","","A mouse button was pressed down, sent exactly once per press.",3,null],[13,"MouseButtonReleased","","A mouse button was released, sent exactly once per release.",3,null],[13,"ButtonPressed","","A button was pressed.",3,null],[13,"ButtonReleased","","A button was released.",3,null],[13,"MouseMoved","","The mouse pointer moved on screen",3,null],[12,"delta_x","amethyst_input::InputEvent","",3,null],[12,"delta_y","","",3,null],[13,"ActionPressed","amethyst_input","The associated action had one of its keys pressed.",3,null],[13,"ActionReleased","","The associated action had one of its keys released.",3,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bindings"}}],[11,"new","","Creates a new empty Bindings structure",4,{"inputs":[],"output":{"name":"self"}}],[11,"insert_axis","","Assign an axis to an ID value",4,{"inputs":[{"name":"self"},{"name":"a"},{"name":"axis"}],"output":{"name":"option"}}],[11,"remove_axis","","Removes an axis, this will return the removed axis if successful.",4,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"axis","","Returns a reference to an axis.",4,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"axes","","Gets a list of all axes",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_action_binding","","Add a button to an action.",4,{"inputs":[{"name":"self"},{"name":"a"},{"name":"button"}],"output":null}],[11,"remove_action_binding","","Removes an action binding that was assigned previously.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"button"}],"output":null}],[11,"action_bindings","","Returns an action's bindings.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"actions","","Gets a list of all action bindings",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"from","","",2,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new input handler.",1,{"inputs":[],"output":{"name":"self"}}],[11,"send_event","","Updates the input handler with a new engine event.",1,{"inputs":[{"name":"self"},{"name":"windowevent"},{"name":"eventchannel"}],"output":null}],[11,"keys_that_are_down","","Returns an iterator over all keys that are down.",1,{"inputs":[{"name":"self"}],"output":{"name":"keycodes"}}],[11,"key_is_down","","Checks if a key is down.",1,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"mouse_buttons_that_are_down","","Returns an iterator over all pressed mouse buttons",1,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttons"}}],[11,"mouse_button_is_down","","Checks if a mouse button is down.",1,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"scan_codes_that_are_down","","Returns an iterator over all pressed scan codes",1,{"inputs":[{"name":"self"}],"output":{"name":"scancodes"}}],[11,"scan_code_is_down","","Checks if the key corresponding to a scan code is down.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mouse_position","","Gets the current mouse position.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"buttons_that_are_down","","Returns an iterator over all buttons that are down.",1,{"inputs":[{"name":"self"}],"output":{"name":"buttons"}}],[11,"button_is_down","","Checks if a button is down.",1,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"axis_value","","Returns the value of an axis by the string id, if the id doesn't exist this returns None.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"action_is_down","","Returns true if any of the action keys are down.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"inputevent"}}],[11,"new","","Create a new input system. Needs a reader id for `EventHandler<winit::Event>`.",5,{"inputs":[{"name":"readerid"}],"output":{"name":"self"}}],[11,"run","","",5,null],[11,"default","","",6,{"inputs":[],"output":{"name":"inputbundle"}}],[11,"new","","Create a new input bundle with no bindings",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_bindings","","Use the provided bindings with the `InputHandler`",6,{"inputs":[{"name":"self"},{"name":"bindings"}],"output":{"name":"self"}}],[11,"with_bindings_from_file","","Load bindings from file",6,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"build","","",6,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[6,"KeyCodes","","Iterator over keycodes",null,null],[6,"ScanCodes","","Iterator over key scan codes",null,null],[6,"MouseButtons","","Iterator over MouseButtons",null,null],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Axis"],[3,"InputHandler"],[4,"Button"],[4,"InputEvent"],[3,"Bindings"],[3,"InputSystem"],[3,"InputBundle"],[3,"Buttons"]]};
searchIndex["amethyst_renderer"] = {"doc":"A data parallel rendering engine developed by the [Amethyst][am] project. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[4,"ImageError","amethyst_renderer","Error.",null,null],[13,"InvalidData","","",0,null],[13,"InvalidArg","","",0,null],[13,"Unsupported","","",0,null],[13,"Internal","","",0,null],[13,"Io","","",0,null],[4,"ElementState","","",null,null],[13,"Pressed","","",1,null],[13,"Released","","",1,null],[4,"Event","","",null,null],[13,"WindowEvent","","",2,null],[12,"window_id","amethyst_renderer::Event","",2,null],[12,"event","","",2,null],[13,"DeviceEvent","amethyst_renderer","",2,null],[12,"device_id","amethyst_renderer::Event","",2,null],[12,"event","","",2,null],[13,"Awakened","amethyst_renderer","",2,null],[3,"KeyboardInput","","",null,null],[12,"scancode","","Identifies the physical key pressed",3,null],[12,"state","","",3,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",3,null],[12,"modifiers","","Modifier keys active at the time of this input.",3,null],[4,"MouseButton","","",null,null],[13,"Left","","",4,null],[13,"Right","","",4,null],[13,"Middle","","",4,null],[13,"Other","","",4,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",5,null],[13,"Key2","","The '2' key over the letters.",5,null],[13,"Key3","","The '3' key over the letters.",5,null],[13,"Key4","","The '4' key over the letters.",5,null],[13,"Key5","","The '5' key over the letters.",5,null],[13,"Key6","","The '6' key over the letters.",5,null],[13,"Key7","","The '7' key over the letters.",5,null],[13,"Key8","","The '8' key over the letters.",5,null],[13,"Key9","","The '9' key over the letters.",5,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",5,null],[13,"A","","",5,null],[13,"B","","",5,null],[13,"C","","",5,null],[13,"D","","",5,null],[13,"E","","",5,null],[13,"F","","",5,null],[13,"G","","",5,null],[13,"H","","",5,null],[13,"I","","",5,null],[13,"J","","",5,null],[13,"K","","",5,null],[13,"L","","",5,null],[13,"M","","",5,null],[13,"N","","",5,null],[13,"O","","",5,null],[13,"P","","",5,null],[13,"Q","","",5,null],[13,"R","","",5,null],[13,"S","","",5,null],[13,"T","","",5,null],[13,"U","","",5,null],[13,"V","","",5,null],[13,"W","","",5,null],[13,"X","","",5,null],[13,"Y","","",5,null],[13,"Z","","",5,null],[13,"Escape","","The Escape key, next to F1.",5,null],[13,"F1","","",5,null],[13,"F2","","",5,null],[13,"F3","","",5,null],[13,"F4","","",5,null],[13,"F5","","",5,null],[13,"F6","","",5,null],[13,"F7","","",5,null],[13,"F8","","",5,null],[13,"F9","","",5,null],[13,"F10","","",5,null],[13,"F11","","",5,null],[13,"F12","","",5,null],[13,"F13","","",5,null],[13,"F14","","",5,null],[13,"F15","","",5,null],[13,"Snapshot","","Print Screen/SysRq.",5,null],[13,"Scroll","","Scroll Lock.",5,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",5,null],[13,"Insert","","`Insert`, next to Backspace.",5,null],[13,"Home","","",5,null],[13,"Delete","","",5,null],[13,"End","","",5,null],[13,"PageDown","","",5,null],[13,"PageUp","","",5,null],[13,"Left","","",5,null],[13,"Up","","",5,null],[13,"Right","","",5,null],[13,"Down","","",5,null],[13,"Back","","The Backspace key, right over Enter.",5,null],[13,"Return","","The Enter key.",5,null],[13,"Space","","The space bar.",5,null],[13,"Compose","","The \"Compose\" key on Linux.",5,null],[13,"Numlock","","",5,null],[13,"Numpad0","","",5,null],[13,"Numpad1","","",5,null],[13,"Numpad2","","",5,null],[13,"Numpad3","","",5,null],[13,"Numpad4","","",5,null],[13,"Numpad5","","",5,null],[13,"Numpad6","","",5,null],[13,"Numpad7","","",5,null],[13,"Numpad8","","",5,null],[13,"Numpad9","","",5,null],[13,"AbntC1","","",5,null],[13,"AbntC2","","",5,null],[13,"Add","","",5,null],[13,"Apostrophe","","",5,null],[13,"Apps","","",5,null],[13,"At","","",5,null],[13,"Ax","","",5,null],[13,"Backslash","","",5,null],[13,"Calculator","","",5,null],[13,"Capital","","",5,null],[13,"Colon","","",5,null],[13,"Comma","","",5,null],[13,"Convert","","",5,null],[13,"Decimal","","",5,null],[13,"Divide","","",5,null],[13,"Equals","","",5,null],[13,"Grave","","",5,null],[13,"Kana","","",5,null],[13,"Kanji","","",5,null],[13,"LAlt","","",5,null],[13,"LBracket","","",5,null],[13,"LControl","","",5,null],[13,"LMenu","","",5,null],[13,"LShift","","",5,null],[13,"LWin","","",5,null],[13,"Mail","","",5,null],[13,"MediaSelect","","",5,null],[13,"MediaStop","","",5,null],[13,"Minus","","",5,null],[13,"Multiply","","",5,null],[13,"Mute","","",5,null],[13,"MyComputer","","",5,null],[13,"NavigateForward","","",5,null],[13,"NavigateBackward","","",5,null],[13,"NextTrack","","",5,null],[13,"NoConvert","","",5,null],[13,"NumpadComma","","",5,null],[13,"NumpadEnter","","",5,null],[13,"NumpadEquals","","",5,null],[13,"OEM102","","",5,null],[13,"Period","","",5,null],[13,"PlayPause","","",5,null],[13,"Power","","",5,null],[13,"PrevTrack","","",5,null],[13,"RAlt","","",5,null],[13,"RBracket","","",5,null],[13,"RControl","","",5,null],[13,"RMenu","","",5,null],[13,"RShift","","",5,null],[13,"RWin","","",5,null],[13,"Semicolon","","",5,null],[13,"Slash","","",5,null],[13,"Sleep","","",5,null],[13,"Stop","","",5,null],[13,"Subtract","","",5,null],[13,"Sysrq","","",5,null],[13,"Tab","","",5,null],[13,"Underline","","",5,null],[13,"Unlabeled","","",5,null],[13,"VolumeDown","","",5,null],[13,"VolumeUp","","",5,null],[13,"Wake","","",5,null],[13,"WebBack","","",5,null],[13,"WebFavorites","","",5,null],[13,"WebForward","","",5,null],[13,"WebHome","","",5,null],[13,"WebRefresh","","",5,null],[13,"WebSearch","","",5,null],[13,"WebStop","","",5,null],[13,"Yen","","",5,null],[4,"WindowEvent","","",null,null],[13,"Resized","","The size of the window has changed.",6,null],[13,"Moved","","The position of the window has changed.",6,null],[13,"Closed","","The window has been closed.",6,null],[13,"DroppedFile","","A file has been dropped into the window.",6,null],[13,"HoveredFile","","A file is being hovered over the window.",6,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",6,null],[13,"ReceivedCharacter","","The window received a unicode character.",6,null],[13,"Focused","","The window gained or lost focus.",6,null],[13,"KeyboardInput","","An event from the keyboard has been received.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[12,"input","","",6,null],[13,"MouseMoved","amethyst_renderer","The cursor has moved on the window.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[12,"position","","",6,null],[13,"MouseEntered","amethyst_renderer","The cursor has entered the window.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[13,"MouseLeft","amethyst_renderer","The cursor has left the window.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[13,"MouseWheel","amethyst_renderer","A mouse wheel movement or touchpad scroll occurred.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[12,"delta","","",6,null],[12,"phase","","",6,null],[13,"MouseInput","amethyst_renderer","An mouse button press has been received.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[12,"state","","",6,null],[12,"button","","",6,null],[13,"TouchpadPressure","amethyst_renderer","Touchpad pressure event.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[12,"pressure","","",6,null],[12,"stage","","",6,null],[13,"AxisMotion","amethyst_renderer","Motion on some analog axis not otherwise handled. May overlap with mouse motion.",6,null],[12,"device_id","amethyst_renderer::WindowEvent","",6,null],[12,"axis","","",6,null],[12,"value","","",6,null],[13,"Refresh","amethyst_renderer","The window needs to be redrawn.",6,null],[13,"Suspended","","App has been suspended or resumed.",6,null],[13,"Touch","","Touch event has been received",6,null],[3,"RenderBundle","","Rendering bundle",null,null],[3,"ActiveCamera","","Active camera resource, used by the renderer to choose which camera to get the view matrix from. If no active camera is found, the first camera will be used as a fallback.",null,null],[12,"entity","","Camera entity",7,null],[3,"Camera","","Camera struct.",null,null],[12,"proj","","Graphical projection of the camera.",8,null],[3,"Rgba","","An RGBA color value.",null,null],[12,"0","","",9,null],[12,"1","","",9,null],[12,"2","","",9,null],[12,"3","","",9,null],[3,"DisplayConfig","","Structure for holding the renderer configuration.",null,null],[12,"title","","Name of the application window.",10,null],[12,"fullscreen","","Enables or disables fullscreen mode.",10,null],[12,"dimensions","","Current window dimensions, measured in pixels (px).",10,null],[12,"min_dimensions","","Minimum window dimensions, measured in pixels (px).",10,null],[12,"max_dimensions","","Maximum window dimensions, measured in pixels (px).",10,null],[12,"vsync","","Enables or disables vertical synchronization.",10,null],[12,"multisampling","","Level of MSAA anti-aliasing.",10,null],[12,"visibility","","Sets the visibility of the window.",10,null],[3,"BmpFormat","","Allows loading of BMP files.",null,null],[3,"ComboMeshCreator","","Mesh creator for `VertexBufferCombination`.",null,null],[3,"ImageData","","ImageData provided by formats, can be interpreted as a texture.",null,null],[12,"raw","","The raw image data.",11,null],[3,"JpgFormat","","Allows loading of jpg or jpeg files.",null,null],[3,"ObjFormat","","Allows loading from Wavefront files see: https://en.wikipedia.org/wiki/Wavefront_.obj_file",null,null],[3,"PngFormat","","Allows loading of PNG files.",null,null],[3,"TextureMetadata","","Texture metadata, used while loading",null,null],[12,"sampler","","Sampler info",12,null],[12,"mip_levels","","Mipmapping",12,null],[12,"size","","Texture size",12,null],[12,"dynamic","","Dynamic texture",12,null],[12,"format","","Surface type",12,null],[12,"channel","","Channel type",12,null],[3,"DirectionalLight","","A directional light source.",null,null],[12,"color","","Color of the light in RGBA8 format.",13,null],[12,"direction","","Direction that the light is pointing.",13,null],[3,"PointLight","","A point light source.",null,null],[12,"center","","Location of the light source in three dimensional space.",14,null],[12,"color","","Color of the light in RGBA8 format.",14,null],[12,"intensity","","Brightness of the light source, in lumens.",14,null],[12,"radius","","Maximum radius of the point light's affected area.",14,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",14,null],[3,"SpotLight","","A spot light source.",null,null],[12,"angle","","Opening angle of the light cone in degrees.",15,null],[12,"center","","Location of the light source in three dimensional space.",15,null],[12,"color","","Color of the light in RGBA8 format.",15,null],[12,"direction","","Direction that the light is pointing.",15,null],[12,"intensity","","Brightness of the light source, in lumens.",15,null],[12,"radius","","Maximum radius of the point light's affected area.",15,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",15,null],[3,"SunLight","","A realistic disk-shaped sun light source.",null,null],[12,"ang_rad","","The sun's angular radius in degrees.",16,null],[12,"color","","Color of the light in RGBA8 format.",16,null],[12,"direction","","Direction that the light is pointing.",16,null],[12,"intensity","","Brightness of the sun light, in lux.",16,null],[3,"Mesh","","Represents a polygonal mesh.",null,null],[3,"VertexBuffer","","Raw buffer with its attributes",null,null],[3,"Material","","Material struct.",null,null],[12,"albedo","","Diffuse map.",17,null],[12,"emission","","Emission map.",17,null],[12,"normal","","Normal map.",17,null],[12,"metallic","","Metallic map.",17,null],[12,"roughness","","Roughness map.",17,null],[12,"ambient_occlusion","","Ambient occlusion map.",17,null],[12,"caveat","","Caveat map.",17,null],[3,"MaterialDefaults","","A resource providing default textures for `Material`. These will be be used by the renderer in case a texture handle points to a texture which is not loaded already. Additionally, you can use it to fill up the fields of `Material` you don't want to specify.",null,null],[12,"0","","",18,null],[3,"DrawFlat","","Draw mesh without lighting `V` is `VertexFormat`",null,null],[3,"DrawFlatSeparate","","Draw mesh without lighting",null,null],[3,"DrawPbm","","Draw mesh with physically based lighting `V` is `VertexFormat`",null,null],[3,"DrawPbmSeparate","","Draw mesh with physically based lighting",null,null],[3,"DrawShaded","","Draw mesh with simple lighting technique `V` is `VertexFormat`",null,null],[3,"DrawShadedSeparate","","Draw mesh with simple lighting technique",null,null],[3,"ColorBuffer","","Target color buffer.",null,null],[12,"as_input","","Shader resource view.",19,null],[12,"as_output","","Target view.",19,null],[3,"Data","","",null,null],[12,"const_bufs","","",20,null],[12,"globals","","",20,null],[12,"out_colors","","",20,null],[12,"out_blends","","",20,null],[12,"out_depth","","",20,null],[12,"samplers","","",20,null],[12,"textures","","",20,null],[12,"vertex_bufs","","",20,null],[3,"DepthBuffer","","Target depth-stencil buffer.",null,null],[12,"as_input","","Shader resource view.",21,null],[12,"as_output","","Target view.",21,null],[3,"Effect","","",null,null],[12,"pso","","",22,null],[12,"data","","",22,null],[3,"EffectBuilder","","",null,null],[3,"Init","","FIXME: Cannot `Deserialize` for some reason.",null,null],[12,"const_bufs","","",23,null],[12,"globals","","",23,null],[12,"out_colors","","",23,null],[12,"out_blends","","",23,null],[12,"out_depth","","",23,null],[12,"samplers","","",23,null],[12,"textures","","",23,null],[12,"vertex_bufs","","",23,null],[3,"Meta","","",null,null],[3,"NewEffect","","",null,null],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",null,null],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"StageBuilder","","Constructs a new rendering stage.",null,null],[3,"Target","","A render target.",null,null],[3,"TargetBuilder","","Builds new render targets.",null,null],[3,"Renderer","","Generic renderer.",null,null],[12,"factory","","The gfx factory used for creation of buffers.",24,null],[3,"AmbientColor","","The ambient color of a scene",null,null],[12,"0","","",25,null],[3,"ScreenDimensions","","World resource that stores screen dimensions.",null,null],[3,"WindowMessages","","This specs resource with id 0 permits sending commands to the renderer internal window.",null,null],[3,"RenderSystem","","Rendering system.",null,null],[3,"Texture","","Handle to a GPU texture resource.",null,null],[3,"TextureBuilder","","Builds new textures.",null,null],[3,"PosColor","","Vertex format with position and RGBA8 color attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",26,null],[12,"color","","RGBA color value of the vertex.",26,null],[3,"PosNormTangTex","","Vertex format with position, normal, and UV texture coordinate attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",27,null],[12,"normal","","Normal vector of the vertex.",27,null],[12,"tangent","","Tangent vector of the vertex.",27,null],[12,"tex_coord","","UV texture coordinates used by the vertex.",27,null],[3,"PosNormTex","","Vertex format with position, normal, and UV texture coordinate attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",28,null],[12,"normal","","Normal vector of the vertex.",28,null],[12,"tex_coord","","UV texture coordinates used by the vertex.",28,null],[3,"PosTex","","Vertex format with position and UV texture coordinate attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",29,null],[12,"tex_coord","","UV texture coordinates used by the vertex.",29,null],[3,"Separate","","Vertex format for attributes in separate buffers",null,null],[4,"Projection","","The projection mode of a `Camera`.",null,null],[13,"Orthographic","","An [orthographic projection][op].",30,null],[13,"Perspective","","A realistic [perspective projection][pp].",30,null],[4,"MeshData","","Mesh data for loading",null,null],[13,"PosColor","","Position and color",31,null],[13,"PosTex","","Position and texture coordinates",31,null],[13,"PosNormTex","","Position, normal and texture coordinates",31,null],[13,"PosNormTangTex","","Position, normal, tangent and texture coordinates",31,null],[13,"Creator","","Create a mesh from a given creator",31,null],[4,"TextureData","","Texture data for loading",null,null],[13,"Image","","Image data",32,null],[13,"Rgba","","Color",32,null],[13,"F32","","Float data",32,null],[13,"F64","","Float data",32,null],[13,"U8","","Byte data",32,null],[13,"U16","","Byte data",32,null],[13,"U32","","Byte data",32,null],[13,"U64","","Byte data",32,null],[4,"Light","","A light source.",null,null],[13,"Area","","An area light. FIXME: Missing implementation!",33,null],[13,"Directional","","A directional light.",33,null],[13,"Point","","A point light.",33,null],[13,"Spot","","A spot light.",33,null],[13,"Sun","","A sun light.",33,null],[4,"DepthMode","","",null,null],[13,"LessEqualTest","","",34,null],[13,"LessEqualWrite","","",34,null],[4,"Color","","Type for color attribute of vertex",null,null],[4,"Normal","","Type for texture coord attribute of vertex",null,null],[4,"Position","","Type for position attribute of vertex",null,null],[4,"Tangent","","Type for tangent attribute of vertex",null,null],[4,"TexCoord","","Type for texture coord attribute of vertex",null,null],[5,"build_mesh_with_combo","","Build Mesh with vertex buffer combination",null,{"inputs":[{"name":"vertexbuffercombination"},{"name":"renderer"}],"output":{"name":"result"}}],[5,"create_mesh_asset","","Create mesh",null,{"inputs":[{"name":"meshdata"},{"name":"renderer"}],"output":{"name":"result"}}],[5,"create_texture_asset","","Create a texture asset.",null,{"inputs":[{"name":"texturedata"},{"name":"renderer"}],"output":{"name":"result"}}],[5,"vertex_data","","Construct new vertex data from raw data and vertex format",null,null],[0,"error","","Renderer error types.",null,null],[4,"Error","amethyst_renderer::error","Common renderer error type.",null,null],[13,"BufferCreation","","Failed to create a buffer.",35,null],[13,"NoSuchTarget","","A render target with the given name does not exist.",35,null],[13,"PassInit","","Failed to initialize a render pass.",35,null],[13,"PipelineCreation","","Failed to create a pipeline state object (PSO).",35,null],[13,"PoolCreation","","Failed to create thread pool.",35,null],[13,"ProgramCreation","","Failed to create and link a shader program.",35,null],[13,"ResViewCreation","","Failed to create a resource view.",35,null],[13,"TargetCreation","","Failed to create a render target.",35,null],[13,"TextureCreation","","Failed to create a texture resource.",35,null],[13,"WindowDestroyed","","The window handle associated with the renderer has been destroyed.",35,null],[6,"Result","","Renderer result type.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","",35,{"inputs":[{"name":"combinederror"}],"output":{"name":"error"}}],[11,"from","","",35,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"error"}}],[11,"from","","",35,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"error"}}],[11,"from","","",35,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"from","","",35,{"inputs":[{"name":"programerror"}],"output":{"name":"error"}}],[11,"from","","",35,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"from","","",35,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[0,"pipe","amethyst_renderer","Renderer pipeline configuration.",null,null],[3,"Data","amethyst_renderer::pipe","",null,null],[12,"const_bufs","","",20,null],[12,"globals","","",20,null],[12,"out_colors","","",20,null],[12,"out_blends","","",20,null],[12,"out_depth","","",20,null],[12,"samplers","","",20,null],[12,"textures","","",20,null],[12,"vertex_bufs","","",20,null],[3,"Effect","","",null,null],[12,"pso","","",22,null],[12,"data","","",22,null],[3,"EffectBuilder","","",null,null],[3,"Init","","FIXME: Cannot `Deserialize` for some reason.",null,null],[12,"const_bufs","","",23,null],[12,"globals","","",23,null],[12,"out_colors","","",23,null],[12,"out_blends","","",23,null],[12,"out_depth","","",23,null],[12,"samplers","","",23,null],[12,"textures","","",23,null],[12,"vertex_bufs","","",23,null],[3,"Meta","","",null,null],[3,"NewEffect","","",null,null],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",null,null],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"StageBuilder","","Constructs a new rendering stage.",null,null],[3,"ColorBuffer","","Target color buffer.",null,null],[12,"as_input","","Shader resource view.",19,null],[12,"as_output","","Target view.",19,null],[3,"DepthBuffer","","Target depth-stencil buffer.",null,null],[12,"as_input","","Shader resource view.",21,null],[12,"as_output","","Target view.",21,null],[3,"Target","","A render target.",null,null],[3,"TargetBuilder","","Builds new render targets.",null,null],[4,"DepthMode","","",null,null],[13,"LessEqualTest","","",34,null],[13,"LessEqualWrite","","",34,null],[0,"pass","","Types for constructing render passes.",null,null],[3,"CompiledPass","amethyst_renderer::pipe::pass","A compiled pass.  These are created and managed by the `Renderer`.  This should not be used directly outside of the renderer.",null,null],[8,"PassData","","Used to fetch data from the game world for rendering in the pass.",null,null],[16,"Data","","The data itself.",36,null],[8,"Pass","","Structures implementing this provide a renderer pass.",null,null],[10,"compile","","The pass is given an opportunity to compile shaders and store them in an `Effect` which is then passed to the pass in `apply`.",37,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[10,"apply","","Called whenever the renderer is ready to apply the pass.  Feed commands into the encoder here.",37,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"compiledpass"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"apply","","Applies the inner pass.",38,null],[11,"new_target","","Distributes new target data to the pass.",38,{"inputs":[{"name":"self"},{"name":"target"}],"output":null}],[11,"clone","amethyst_renderer","",39,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"meta"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"init"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"init"}}],[11,"hash","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"init"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"init"}],"output":{"name":"bool"}}],[11,"link_to","","",23,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"data"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"bake_to","","",20,{"inputs":[{"name":"self"},{"name":"rawdataset"},{"name":"meta"},{"name":"manager"},{"name":"accessinfo"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"depthmode"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"depthmode"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"update_global","","",22,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"}],"output":null}],[11,"update_buffer","","FIXME: Update raw buffer without transmute, use `Result` somehow.",22,null],[11,"update_constant_buffer","","FIXME: Update raw buffer without transmute.",22,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"},{"name":"encoder"}],"output":null}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"draw","","",22,{"inputs":[{"name":"self"},{"name":"slice"},{"name":"encoder"}],"output":null}],[11,"simple","","",40,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"geom","","",40,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"tess","","",40,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"with_raw_global","","Adds a global constant to this `Effect`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_raw_constant_buffer","","Adds a raw uniform constant to this `Effect`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_primitive_type","","Set the pipeline primitive type.",41,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"self"}}],[11,"with_output","","Sets the output target of the PSO.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_blended_output","","Sets the output target of the PSO.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"colormask"},{"name":"blend"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_texture","","Adds a texture sampler to this `Effect`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_raw_vertex_buffer","","Adds a vertex buffer to this `Effect`.",41,{"inputs":[{"name":"self"},{"name":"attributes"},{"name":"elemstride"},{"name":"instancerate"}],"output":{"name":"self"}}],[11,"build","","TODO: Support render targets as inputs.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_target","","Builds a new `PolyStage` which outputs to the `Target` with the given name.",42,{"inputs":[{"name":"n"}],"output":{"name":"stagebuilder"}}],[11,"with_backbuffer","","Builds a new `PolyStage` which outputs straight into the backbuffer.",42,{"inputs":[],"output":{"name":"stagebuilder"}}],[11,"enable","","Enables the `PolyStage` so it will execute on every frame.",42,{"inputs":[{"name":"self"}],"output":null}],[11,"disable","","Disables the `PolyStage`, preventing it from being executed on every frame.",42,{"inputs":[{"name":"self"}],"output":null}],[11,"is_enabled","","Returns whether this `PolyStage` is enabled.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"apply","","",42,null],[11,"new_targets","","",42,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `StageBuilder` using the given target.",43,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clear_target","","Clears the stage's target.",43,{"inputs":[{"name":"self"},{"name":"c"},{"name":"d"}],"output":{"name":"self"}}],[11,"enabled","","Sets whether the `PolyStage` is turned on by default.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_pass","","Appends another `Pass` to the stage.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stagebuilder"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pipeline"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Builds a new renderer pipeline.",44,{"inputs":[],"output":{"name":"pipelinebuilder"}}],[11,"targets","","Returns an immutable reference to all targets and their name strings.",44,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"apply","","",44,null],[11,"new_targets","","",44,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[11,"targets","","Returns an immutable reference to all targets and their name strings.",44,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"pipelinebuilder"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new PipelineBuilder.",45,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"with_stage","","Constructs a new stage in this pipeline.",45,{"inputs":[{"name":"self"},{"name":"stagebuilder"}],"output":{"name":"pipelinebuilder"}}],[11,"with_target","","Constructs a new render target for this pipeline.",45,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"self"}}],[11,"build","","",45,{"inputs":[{"name":"self"},{"name":"factory"},{"name":"target"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"colorbuffer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"colorbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"colorbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"depthbuffer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"depthbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"depthbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"named","","Creates a new TargetBuilder with the given name.",46,{"inputs":[{"name":"n"}],"output":{"name":"targetbuilder"}}],[11,"clear_color","","Clears all color buffers to the given value.",46,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"v"}],"output":null}],[11,"clear_depth_stencil","","Clears the depth stencil buffer to the given value.",46,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"v"}],"output":null}],[11,"size","","Returns the width and height of the render target, measured in pixels.",46,null],[11,"color_buf","","Returns the color buffer with index `i`.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"color_bufs","","Returns an array slice of the render target's color buffers.",46,null],[11,"depth_buf","","Returns the render target's depth-stencil buffer, if it has one.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resize_main_target","","Creates the OpenGL backend.",46,{"inputs":[{"name":"self"},{"name":"glwindow"}],"output":null}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"targetbuilder"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new TargetBuilder.",47,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_depth_buf","","Sets whether this render target should have a depth-stencil buffer.",47,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_num_color_bufs","","Sets how many color buffers the render target will have. This number must be greater than zero or else `build()` will fail.",47,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_size","","Specifies a custom target size.",47,null],[6,"Targets","amethyst_renderer::pipe","A hash map containing named render targets.",null,null],[8,"PipelineBuild","","",null,null],[16,"Pipeline","","Resuling pipeline",48,null],[10,"build","","Build pipeline",48,{"inputs":[{"name":"self"},{"name":"factory"},{"name":"target"}],"output":{"name":"result"}}],[8,"PipelineData","","The data requested from the `specs::World` by the Pipeline.",null,null],[16,"Data","","The data itself",49,null],[8,"PolyPipeline","","Trait used for the pipeline.",null,null],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",50,null],[10,"new_targets","","Resizes the pipeline targets",50,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[10,"targets","","Returns an immutable reference to all targets and their name strings.",50,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[8,"PolyStages","","",null,null],[10,"apply","","",51,null],[10,"new_targets","","Distributes new targets",51,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[8,"PolyStage","","A stage in the rendering.  Contains multiple passes.",null,null],[10,"apply","","",52,null],[10,"new_targets","","Distributes new targets",52,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[11,"default","amethyst_renderer","",53,{"inputs":[],"output":{"name":"renderbundle"}}],[11,"new","","Create a new render bundle",53,{"inputs":[],"output":{"name":"self"}}],[11,"build","","",53,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"projection"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"orthographic","","Creates an orthographic projection with the given left, right, top, and bottom plane distances.",30,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"projection"}}],[11,"perspective","","Creates a perspective projection with the given aspect ratio and field-of-view.",30,{"inputs":[{"name":"f32"},{"name":"d"}],"output":{"name":"projection"}}],[11,"from","","",8,{"inputs":[{"name":"projection"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"standard_2d","","Create a normalized camera for 2D.",8,{"inputs":[],"output":{"name":"self"}}],[11,"standard_3d","","Create a standard camera for 3D.",8,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"activecamera"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"activecamera"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"activecamera"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"black","","Returns a solid black color value.",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"blue","","Returns a solid blue color value.",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"green","","Returns a solid green color value.",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"red","","Returns a solid red color value.",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"transparent","","Returns a transparent color value.",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"white","","Returns a solid white color value.",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"rgba"}}],[11,"from","","",9,null],[11,"from","","",9,null],[11,"from","","",9,null],[11,"from","","",9,null],[11,"get_format","","",9,null],[11,"convert","","",9,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"displayconfig"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"displayconfig"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"displayconfig"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"m"}],"output":{"name":"self"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"objformat"}}],[11,"import","","",54,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new combo mesh creator with the given combo",55,{"inputs":[{"name":"vertexbuffercombination"}],"output":{"name":"self"}}],[11,"build","","",55,{"inputs":[{"name":"box"},{"name":"renderer"}],"output":{"name":"result"}}],[11,"from","","",55,{"inputs":[{"name":"vertexbuffercombination"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"texturemetadata"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"with_sampler","","Sampler info",12,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"self"}}],[11,"with_mip_levels","","Mipmapping",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_size","","Texture size",12,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"with_format","","Surface type",12,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"self"}}],[11,"with_channel","","Channel type",12,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"self"}}],[11,"dynamic","","Texture is dynamic",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"texturedata"}}],[11,"from","","",32,null],[11,"color","","Creates texture data from color.",32,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"imagedata"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"jpgformat"}}],[11,"from_data","","Load Jpg from memory buffer",56,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"texturemetadata"}],"output":{"name":"result"}}],[11,"import","","",56,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"texturemetadata"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"pngformat"}}],[11,"from_data","","Load Png from memory buffer",57,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"texturemetadata"}],"output":{"name":"result"}}],[11,"import","","",57,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"texturemetadata"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bmpformat"}}],[11,"import","","",58,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"texturemetadata"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"light"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"light"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"light"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"directionallight"}}],[11,"query","","",13,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"directionallight"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"directionallight"}],"output":{"name":"bool"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"directionallight"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pointlight"}}],[11,"query","","",14,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"pointlight"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"pointlight"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"pointlight"}],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"spotlight"}}],[11,"query","","",15,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"spotlight"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"spotlight"}],"output":{"name":"bool"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"spotlight"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sunlight"}}],[11,"query","","",16,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"sunlight"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"sunlight"}],"output":{"name":"bool"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"sunlight"}],"output":{"name":"self"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vertexbuffer"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Builds a new mesh from the given vertices.",60,{"inputs":[{"name":"d"}],"output":{"name":"meshbuilder"}}],[11,"buffer","","Returns the mesh's vertex buffer which matches requested attributes",60,{"inputs":[{"name":"self"},{"name":"attributes"}],"output":{"name":"option"}}],[11,"slice","","Returns associated `Slice`",60,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"transform","","Returns the transformation matrix of the mesh.",60,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"material"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"material"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"material"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"materialdefaults"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"drawflat"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"drawflat"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"drawflat"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawFlat` pass",61,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",61,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",61,null],[11,"default","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"drawflatseparate"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"drawflatseparate"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawFlat` pass",62,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",62,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",62,null],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"drawpbm"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"drawpbm"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"drawpbm"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawPbm` pass",63,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",63,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",63,null],[11,"default","","",64,{"inputs":[],"output":{"name":"drawpbmseparate"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"drawpbmseparate"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"drawpbmseparate"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawPbm` pass",64,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",64,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",64,null],[11,"default","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"drawshaded"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"drawshaded"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"drawshaded"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawShaded` pass",65,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",65,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",65,null],[11,"default","","",66,{"inputs":[],"output":{"name":"drawshadedseparate"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"drawshadedseparate"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"drawshadedseparate"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawShaded` pass",66,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",66,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",66,null],[11,"new","","Creates a `Renderer` with default window settings.",24,{"inputs":[],"output":{"name":"result"}}],[11,"build_with_loop","","Creates a new `RendererBuilder`, equivalent to `RendererBuilder::new()`.",24,{"inputs":[{"name":"eventsloop"}],"output":{"name":"rendererbuilder"}}],[11,"build","","Creates a new `RendererBuilder`, equivalent to `RendererBuilder::new()`.",24,{"inputs":[],"output":{"name":"rendererbuilder"}}],[11,"create_mesh","","Builds a new mesh from the given vertices.",24,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"result"}}],[11,"create_texture","","Builds a new texture resource.",24,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"result"}}],[11,"create_pipe","","Builds a new renderer pipeline.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"draw","","Draws a scene with the given pipeline.",24,null],[11,"events_mut","","Retrieve a mutable borrow of the events loop",24,{"inputs":[{"name":"self"}],"output":{"name":"eventsloop"}}],[11,"resize","","Resize the targets associated with this renderer and pipeline.",24,null],[11,"window","","Retrieves an immutable borrow of the window.",24,{"inputs":[{"name":"self"}],"output":{"name":"winitwindow"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"ambientcolor"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"ambientcolor"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"windowmessages"}}],[11,"new","","Create a new `WindowMessages`",67,{"inputs":[],"output":{"name":"self"}}],[11,"send_command","","Execute this closure on the `winit::Window` next frame.",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new screen dimensions object with the given width and height.",68,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"screendimensions"}}],[11,"width","","Returns the current width of the window.",68,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"height","","Returns the current height of the window.",68,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"aspect_ratio","","Returns the current aspect ratio of the window.",68,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"update","","Updates the width and height of the screen and recomputes the aspect ratio.",68,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Build a new `RenderSystem` from the given pipeline builder and config",69,{"inputs":[{"name":"b"},{"name":"option"}],"output":{"name":"result"}}],[11,"new","","Create a new render system",69,{"inputs":[{"name":"p"},{"name":"renderer"}],"output":{"name":"self"}}],[11,"run_now","","",69,{"inputs":[{"name":"self"},{"name":"resources"}],"output":null}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"from_data","","Builds a new texture with the given raw texture data.",70,{"inputs":[{"name":"d"}],"output":{"name":"texturebuilder"}}],[11,"from_color_val","","Builds a new texture with the given raw texture data.",70,{"inputs":[{"name":"c"}],"output":{"name":"texturebuilder"}}],[11,"sampler","","Returns the sampler for the texture.",70,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"view","","Returns the texture's raw shader resource view.",70,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"texturebuilder"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"bool"}}],[11,"from_color_val","","Creates a new `TextureBuilder` from the given RGBA color value.",71,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"new","","Creates a new `TextureBuilder` with the given raw texture data.",71,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"with_sampler","","Sets the `SamplerInfo` for the texture",71,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"self"}}],[11,"mip_levels","","Sets the number of mipmap levels to generate.",71,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_size","","Sets the texture width and height in pixels.",71,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"dynamic","","Sets whether the texture is mutable or not.",71,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_format","","Sets the texture format",71,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"self"}}],[11,"with_channel_type","","Sets the texture channel type",71,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"self"}}],[11,"build","","Builds and returns the new texture.",71,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"texcoord"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"tangent"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"separate"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"separate"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"separate"}],"output":{"name":"bool"}}],[11,"new","","Create a new Separate vertex attribute",77,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poscolor"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"poscolor"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"poscolor"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"postex"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"postex"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"postex"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"posnormtex"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"posnormtex"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"posnormtex"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"posnormtangtex"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"posnormtangtex"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"posnormtangtex"}],"output":{"name":"bool"}}],[6,"MeshHandle","","A handle to a mesh.",null,null],[6,"Targets","","A hash map containing named render targets.",null,null],[6,"TextureHandle","","A handle to a `Texture` asset.",null,null],[6,"Encoder","","Command buffer encoder type.",null,null],[6,"Factory","","Graphics factory type.",null,null],[6,"PipelineState","","Statically-typed pipeline state object (PSO).",null,null],[6,"Resources","","Graphics resource type.",null,null],[6,"AttributeFormat","","Format for vertex attribute",null,null],[6,"Attributes","","Slice of attributes",null,null],[6,"VertexBufferCombination","","Vertex combo",null,null],[8,"MeshCreator","","Trait used by the asset processor to convert any user supplied mesh representation into an actual `Mesh`.",null,null],[10,"build","","Build a mesh given a `Renderer`",78,{"inputs":[{"name":"box"},{"name":"renderer"}],"output":{"name":"result"}}],[8,"PipelineBuild","","",null,null],[16,"Pipeline","","Resuling pipeline",48,null],[10,"build","","Build pipeline",48,{"inputs":[{"name":"self"},{"name":"factory"},{"name":"target"}],"output":{"name":"result"}}],[8,"PipelineData","","The data requested from the `specs::World` by the Pipeline.",null,null],[16,"Data","","The data itself",49,null],[8,"PolyPipeline","","Trait used for the pipeline.",null,null],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",50,null],[10,"new_targets","","Resizes the pipeline targets",50,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[10,"targets","","Returns an immutable reference to all targets and their name strings.",50,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[8,"PolyStage","","A stage in the rendering.  Contains multiple passes.",null,null],[10,"apply","","",52,null],[10,"new_targets","","Distributes new targets",52,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[8,"PolyStages","","",null,null],[10,"apply","","",51,null],[10,"new_targets","","Distributes new targets",51,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":null}],[8,"Attribute","","Trait for vertex attributes to implement",null,null],[18,"NAME","","Name of the attribute It is used to bind to the attributes in shaders",79,null],[18,"FORMAT","","Format of the attribute defines arity and type",79,null],[18,"SIZE","","Size of the attribue",79,null],[16,"Repr","","Representation of the attribute usually it is `[f32; N]`",79,null],[8,"Query","","Allows to query specific `Attribute`s of `VertexFormat`",null,null],[18,"QUERIED_ATTRIBUTES","","Attributes from tuple `T`",80,null],[8,"VertexFormat","","Trait implemented by all valid vertex formats.",null,null],[18,"ATTRIBUTES","","List of all attributes formats with name and offset.",81,null],[11,"size","","Returns the size of a single vertex in bytes.",81,{"inputs":[],"output":{"name":"usize"}}],[11,"attribute","","Returns attribute of vertex by type",81,{"inputs":[],"output":{"name":"attributeformat"}}],[8,"With","","Trait implemented by all valid vertex formats for each field",null,null],[18,"FORMAT","","Individual format of the attribute for this vertex format",82,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"hash","","",5,null],[11,"hash","","",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[18,"NAME","","Name of the attribute It is used to bind to the attributes in shaders",79,null],[18,"FORMAT","","Format of the attribute defines arity and type",79,null],[18,"SIZE","","Size of the attribue",79,null],[18,"ATTRIBUTES","","List of all attributes formats with name and offset.",81,null],[11,"size","","Returns the size of a single vertex in bytes.",81,{"inputs":[],"output":{"name":"usize"}}],[11,"attribute","","Returns attribute of vertex by type",81,{"inputs":[],"output":{"name":"attributeformat"}}],[18,"FORMAT","","Individual format of the attribute for this vertex format",82,null],[18,"QUERIED_ATTRIBUTES","","Attributes from tuple `T`",80,null]],"paths":[[4,"ImageError"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"WindowEvent"],[3,"ActiveCamera"],[3,"Camera"],[3,"Rgba"],[3,"DisplayConfig"],[3,"ImageData"],[3,"TextureMetadata"],[3,"DirectionalLight"],[3,"PointLight"],[3,"SpotLight"],[3,"SunLight"],[3,"Material"],[3,"MaterialDefaults"],[3,"ColorBuffer"],[3,"Data"],[3,"DepthBuffer"],[3,"Effect"],[3,"Init"],[3,"Renderer"],[3,"AmbientColor"],[3,"PosColor"],[3,"PosNormTangTex"],[3,"PosNormTex"],[3,"PosTex"],[4,"Projection"],[4,"MeshData"],[4,"TextureData"],[4,"Light"],[4,"DepthMode"],[4,"Error"],[8,"PassData"],[8,"Pass"],[3,"CompiledPass"],[3,"Meta"],[3,"NewEffect"],[3,"EffectBuilder"],[3,"Stage"],[3,"StageBuilder"],[3,"Pipeline"],[3,"PipelineBuilder"],[3,"Target"],[3,"TargetBuilder"],[8,"PipelineBuild"],[8,"PipelineData"],[8,"PolyPipeline"],[8,"PolyStages"],[8,"PolyStage"],[3,"RenderBundle"],[3,"ObjFormat"],[3,"ComboMeshCreator"],[3,"JpgFormat"],[3,"PngFormat"],[3,"BmpFormat"],[3,"VertexBuffer"],[3,"Mesh"],[3,"DrawFlat"],[3,"DrawFlatSeparate"],[3,"DrawPbm"],[3,"DrawPbmSeparate"],[3,"DrawShaded"],[3,"DrawShadedSeparate"],[3,"WindowMessages"],[3,"ScreenDimensions"],[3,"RenderSystem"],[3,"Texture"],[3,"TextureBuilder"],[4,"Position"],[4,"Color"],[4,"TexCoord"],[4,"Normal"],[4,"Tangent"],[3,"Separate"],[8,"MeshCreator"],[8,"Attribute"],[8,"Query"],[8,"VertexFormat"],[8,"With"]]};
searchIndex["amethyst_ui"] = {"doc":"Provides components and systems to create an in game user interface.","items":[[3,"UiBundle","amethyst_ui","UI bundle",null,null],[3,"UiFocused","","This resource stores the currently focused UI element.",null,null],[12,"entity","","The entity containing the focused UI element.",0,null],[3,"FontAsset","","A loaded set of fonts from a file.",null,null],[12,"0","","",1,null],[3,"TtfFormat","","Loads font files, supports TrueType and some OpenType files.",null,null],[3,"UiImage","","A component with the texture to display in this entity's `UiTransform`",null,null],[12,"texture","","The texture to display",2,null],[3,"DrawUi","","Draw Ui elements.  UI won't display without this.  It's recommended this be your last pass.",null,null],[3,"ResizeSystem","","This system rearranges UI elements whenever the screen is resized using their `UiResize` component.",null,null],[3,"UiResize","","Whenever the window is resized the function in this component will be called on this entity's UiTransform, along with the new width and height of the window.",null,null],[12,"0","","",3,null],[3,"TextEditing","","If this component is attached to an entity with a UiText then that UiText is editable. This component also controls how that editing works.",null,null],[12,"cursor_position","","The current editing cursor position, specified in terms of glyphs, not characters.",4,null],[12,"max_length","","The maximum graphemes permitted in this string.",4,null],[12,"highlight_vector","","The amount and direction of glyphs highlighted relative to the cursor.",4,null],[12,"selected_text_color","","The color of the text itself when highlighted.",4,null],[12,"selected_background_color","","The text background color when highlighted.",4,null],[12,"use_block_cursor","","If this is true the text will use a block cursor for editing.  Otherwise this uses a standard line cursor.  This is not recommended if your font is not monospace.",4,null],[3,"UiSystem","","This system processes the underlying UI data as needed.",null,null],[3,"UiText","","A component used to display text in this entity's UiTransform",null,null],[12,"text","","The string rendered by this.",5,null],[12,"font_size","","The height of a line of text in pixels.",5,null],[12,"color","","The color of the rendered text, using a range of 0.0 to 1.0 per channel.",5,null],[12,"font","","The font used for rendering.",5,null],[12,"password","","If true this will be rendered as dots instead of the text.",5,null],[3,"UiTransform","","The raw pixels on screen that are populated.",null,null],[12,"id","","An identifier. Serves no purpose other than to help you distinguish between UI elements.",6,null],[12,"x","","X coordinate, 0 is the left edge, while the width of the screen is the right edge.",6,null],[12,"y","","Y coordinate, 0 is the top edge, while the height of the screen is the bottom edge.",6,null],[12,"z","","Z order, entities with a lower Z order will be rendered on top of entities with a higher Z order.",6,null],[12,"width","","The width of this UI element",6,null],[12,"height","","The height of this UI element",6,null],[12,"tab_order","","The UI element tab order.  When the player presses tab the UI focus will shift to the UI element with the next highest tab order, or if another element with the same tab_order as this one exists they are ordered according to Entity creation order.  Shift-tab walks this ordering backwards.",6,null],[11,"new","","Create a new UI bundle",7,{"inputs":[],"output":{"name":"self"}}],[11,"build","","",7,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ttfformat"}}],[11,"import","","",8,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"uiimage"}}],[11,"new","","Create instance of `DrawUi` pass",9,{"inputs":[{"name":"loader"},{"name":"assetstorage"}],"output":{"name":"self"}}],[11,"compile","","",9,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",9,null],[11,"new","","Creates a new ResizeSystem that listens with the given reader Id.",10,{"inputs":[{"name":"readerid"}],"output":{"name":"resizesystem"}}],[11,"run","","",10,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uitext"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new UiText",5,null],[11,"new","","Create a new TextEditing Component",4,null],[11,"new","","Initializes a new UiSystem that uses the given reader id.",11,{"inputs":[{"name":"readerid"}],"output":{"name":"self"}}],[11,"run","","",11,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uitransform"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new UiTransform",6,{"inputs":[{"name":"string"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"i32"}],"output":{"name":"uitransform"}}],[6,"FontHandle","","A handle to font data stored with `amethyst_assets`.",null,null],[6,"OtfFormat","","Identical to TtfFormat.",null,null]],"paths":[[3,"UiFocused"],[3,"FontAsset"],[3,"UiImage"],[3,"UiResize"],[3,"TextEditing"],[3,"UiText"],[3,"UiTransform"],[3,"UiBundle"],[3,"TtfFormat"],[3,"DrawUi"],[3,"ResizeSystem"],[3,"UiSystem"]]};
searchIndex["amethyst_utils"] = {"doc":"","items":[[0,"fps_counter","amethyst_utils","Util Resources",null,null],[3,"FPSCounter","amethyst_utils::fps_counter","The FPSCounter resource needed by the FPSCounterSystem.",null,null],[3,"FPSCounterSystem","","Add this system to your game to automatically push FPS values to the FPSCounter resource with id 0",null,null],[3,"FPSCounterBundle","","Automatically adds a FPSCounterSystem and a FPSCounter resource with the specified sample size.",null,null],[11,"new","","Creates a new FPSCounter that calculates the average fps over samplesize values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"fpscounter"}}],[11,"push","","Add a new delta time value.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"frame_fps","","Get the fps of the this frame.",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"sampled_fps","","Get the average fps over the samplesize frames.",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"run","","",1,null],[11,"new","","Creates a new FPSCounterBundle with the specified sample size.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","Same as FPSCounterBundle::new(20).",2,{"inputs":[],"output":{"name":"self"}}],[11,"build","","",2,{"inputs":[{"name":"self"},{"name":"world"},{"name":"dispatcherbuilder"}],"output":{"name":"result"}}],[0,"circular_buffer","amethyst_utils","CircularBuffer",null,null],[3,"CircularBuffer","amethyst_utils::circular_buffer","A CircularBuffer that drops the oldest element inserted when full.",null,null],[11,"new","","Creates a new CircularBuffer with fixed size",3,{"inputs":[{"name":"usize"}],"output":{"name":"circularbuffer"}}],[11,"push","","Add a value to the CircularBuffer Returns the popped value if the buffer is full",3,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"queue","","Get an immutable reference to the values inside the CircularBuffer",3,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}]],"paths":[[3,"FPSCounter"],[3,"FPSCounterSystem"],[3,"FPSCounterBundle"],[3,"CircularBuffer"]]};
initSearch(searchIndex);
