var searchIndex = {};
searchIndex["amethyst"] = {"doc":"Amethyst is a free and open source game engine written in idiomatic [Rust][rs] for building video games and interactive multimedia applications. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[3,"Application","amethyst","User-friendly facade for building games. Manages main loop.",null,null],[12,"engine","","The `engine` struct, holding world and thread pool.",0,null],[3,"ApplicationBuilder","","Helper builder for Applications.",null,null],[12,"events","","Allows to create `RenderSystem`",1,null],[3,"Engine","","User-facing engine handle.",null,null],[12,"delta","","Current delta time value.",2,null],[12,"pool","","Thread pool.",2,null],[12,"world","","World.",2,null],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[4,"Error","","Common error type.",null,null],[13,"Application","","Application error.",3,null],[13,"Config","","Asset management error. Configuration error.",3,null],[13,"System","","System error.",3,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",4,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",4,null],[13,"Push","","Pause the active state and push a new state onto the stack.",4,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",4,null],[13,"Quit","","Stop and remove all states and shut down the engine.",4,null],[0,"assets","","Re-exports amethyst_assets and provides formats specific to the engine.",null,null],[0,"formats","amethyst::assets","Contains formats that amethyst can load as assets.",null,null],[0,"audio","amethyst::assets::formats","Provides audio formats",null,null],[3,"WavFormat","amethyst::assets::formats::audio","Loads audio from wav files.",null,null],[3,"OggFormat","","Loads audio from Ogg Vorbis files",null,null],[3,"FlacFormat","","Loads audio from Flac files.",null,null],[11,"extension","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",5,null],[11,"extension","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",6,null],[11,"extension","","",7,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",7,null],[0,"textures","amethyst::assets::formats","Formats to load textures Provides texture formats",null,null],[4,"ImageError","amethyst::assets::formats::textures","Error.",null,null],[13,"InvalidData","","",8,null],[13,"InvalidArg","","",8,null],[13,"Unsupported","","",8,null],[13,"Internal","","",8,null],[13,"Io","","",8,null],[3,"ImageData","","ImageData provided by formats, can be interpreted as a texture.",null,null],[3,"JpegFormat","","Allows loading of Jpeg files.",null,null],[3,"JpgFormat","","Allows loading of Jpg files.",null,null],[3,"PngFormat","","Allows loading of PNG files.",null,null],[3,"BmpFormat","","Allows loading of BMP files.",null,null],[6,"ImageFuture","","A future which will eventually have an image available.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"imagedata"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extension","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",10,null],[11,"extension","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",11,null],[11,"extension","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",12,null],[11,"extension","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",13,null],[0,"meshes","amethyst::assets::formats","Formats to load meshes",null,null],[3,"ObjFormat","amethyst::assets::formats::meshes","Allows loading from Wavefront files see: https://en.wikipedia.org/wiki/Wavefront_.obj_file",null,null],[4,"ObjError","","Error type of `ObjFormat`",null,null],[13,"Utf8","","Coundn't convert bytes to `String`",14,null],[13,"Parse","","Cound't parse obj file",14,null],[6,"VerticesFuture","","A future which will eventually have an vertices available.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extension","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",15,null],[0,"audio","amethyst","Loading and playing of audio files.",null,null],[3,"AudioContext","amethyst::audio","A context for loading audio files",null,null],[3,"Dj","","This structure provides a way to programmatically pick and play music.",null,null],[3,"Source","","A loaded audio file",null,null],[3,"DecoderError","","An error occurred while decoding the source.",null,null],[0,"play","","Provides functions used to play audio.",null,null],[5,"try_play_once","amethyst::audio::play","Play a sound once.",null,{"inputs":[{"name":"source"},{"name":"output"}],"output":{"name":"result"}}],[5,"play_once","","Play a sound once.",null,{"inputs":[{"name":"source"},{"name":"output"}],"output":null}],[5,"play_n_times","","Play a sound n times.",null,{"inputs":[{"name":"source"},{"name":"output"},{"name":"u16"}],"output":null}],[5,"try_play_n_times","","Play a sound n times.",null,{"inputs":[{"name":"source"},{"name":"output"},{"name":"u16"}],"output":{"name":"result"}}],[0,"output","amethyst::audio","Provides structures and functions used to get audio outputs.",null,null],[3,"Output","amethyst::audio::output","A speaker(s) through which audio can be played.",null,null],[3,"OutputIterator","","An iterator over outputs",null,null],[5,"default_output","","Get the default output, returns none if no outputs are available.",null,{"inputs":[],"output":{"name":"option"}}],[5,"outputs","","Get a list of outputs available to the system.",null,{"inputs":[],"output":{"name":"outputiterator"}}],[11,"name","","Gets the name of the output",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","amethyst::audio","Creates a new audio context.",18,{"inputs":[],"output":{"name":"audiocontext"}}],[11,"category","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",18,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"threadpool"}],"output":{"name":"result"}}],[11,"update","","",18,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"new","","Creates a new Dj using the given audio output.",19,{"inputs":[{"name":"output"}],"output":{"name":"dj"}}],[11,"set_picker","","A Dj's picker will be called by the DjSystem whenever the Dj runs out of music to play.",19,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clear_picker","","Clears the previously set picker.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"append","","Adds a source to the Dj's queue of music to play.",19,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"result"}}],[11,"empty","","Returns true if the Dj has no more music to play.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"volume","","Retrieves the volume of the Dj, between 0.0 and 1.0;",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_volume","","Sets the volume of the Dj.",19,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"play","","Resumes playback of a paused Dj.  Has no effect if this Dj was never paused.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"pause","","Pauses playback, this can be resumed with `Dj::play`",19,{"inputs":[{"name":"self"}],"output":null}],[11,"is_paused","","Returns true if the Dj is currently paused.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stop","","Empties the Dj's queue of all music.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"as_ref","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ecs","amethyst","`amethyst` engine built-in types for `specs`.",null,null],[0,"input","amethyst::ecs","`amethyst` input rebinding module",null,null],[3,"Bindings","amethyst::ecs::input","Used for saving and loading input settings.",null,null],[3,"InputHandler","","This struct holds state information about input devices.",null,null],[12,"bindings","","Maps inputs to actions and axes.",22,null],[0,"transform","amethyst::ecs","`amethyst` transform ecs module",null,null],[0,"components","amethyst::ecs::transform","Components for the transform processor.",null,null],[3,"Child","amethyst::ecs::transform::components","Component for defining a parent entity.",null,null],[3,"Init","","Initialization flag. Added to entity with a `LocalTransform` component after the first update.",null,null],[3,"InnerTransform","","Raw transform data.",null,null],[12,"translation","","Translation/position vector [x, y, z]",23,null],[12,"rotation","","Quaternion [w (scalar), x, y, z]",23,null],[12,"scale","","Scale vector [x, y, z]",23,null],[3,"LocalTransform","","Local position, rotation, and scale (from parent if it exists).",null,null],[3,"Transform","","Performs a global transformation on the entity (transform from origin).",null,null],[12,"0","","",24,null],[11,"new","","Creates a new child",25,{"inputs":[{"name":"entity"}],"output":{"name":"child"}}],[11,"parent","","Returns our parent entity.",25,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[11,"set_parent","","Sets the given entity as our parent.",25,{"inputs":[{"name":"self"},{"name":"entity"}],"output":null}],[11,"flag","","Signals to our parent entity that its child entity has changed.",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dirty","","Returns whether the parent entity has changed.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"init"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"innertransform"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"innertransform"}}],[11,"flag","","Flags the current transform for re-computation.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dirty","","Returns whether or not the current transform is flagged for re-computation or \"dirty\".",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matrix","","Returns the local object matrix for the transform.",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",24,null],[11,"into","","",24,null],[0,"systems","amethyst::ecs::transform","Scene graph system and types",null,null],[3,"TransformSystem","amethyst::ecs::transform::systems","Handles updating `Transform` components based on the `LocalTransform` component and parents.",null,null],[11,"default","","",28,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"new","","Creates a new transform processor.",28,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"run","","",28,null],[0,"rendering","amethyst::ecs","`amethyst` rendering ecs module",null,null],[0,"components","amethyst::ecs::rendering","Components for the rendering processor.",null,null],[3,"LightComponent","amethyst::ecs::rendering::components","Wraps `Light` into component",null,null],[12,"0","","",29,null],[3,"MaterialComponent","","Wraps `Material` into component",null,null],[12,"0","","",30,null],[3,"MeshComponent","","Wraps `Mesh` into component",null,null],[12,"0","","",31,null],[3,"MeshFuture","","Will be `MeshComponent` result type of `MeshContext::create_asset`",null,null],[3,"MeshContext","","Context to create meshes from vertices",null,null],[3,"TextureFuture","","Will be `TextureComponent` result type of `TextureContext::create_asset`",null,null],[3,"TextureComponent","","Wraps `Texture` into component",null,null],[12,"0","","",32,null],[3,"TextureContext","","Context to create textures from images",null,null],[4,"Vertices","","One of known vertices type",null,null],[13,"PosColor","","Position and color",33,null],[13,"PosTex","","Position and texture coordinates",33,null],[13,"PosNormTex","","Position, normal and texture coordinates",33,null],[13,"PosNormTangTex","","Position, normal, tangent and texture coordinates",33,null],[4,"TextureError","","Error that can occur during texture creation",null,null],[13,"Renderer","","Error occured in renderer",34,null],[13,"UnsupportedColorFormat","","Color format unsupported",34,null],[13,"UnsupportedSize","","Texture is oversized",34,null],[12,"max","amethyst::ecs::rendering::components::TextureError","Maximum size of texture (width, height)",34,null],[12,"got","","Image size (width, height)",34,null],[11,"clone","amethyst::ecs::rendering::components","",30,{"inputs":[{"name":"self"}],"output":{"name":"materialcomponent"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"meshcomponent"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new `MeshComponent` from `Mesh`",31,{"inputs":[{"name":"mesh"}],"output":{"name":"self"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"as_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"poll","","",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"category","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",36,{"inputs":[{"name":"self"},{"name":"vertices"},{"name":"threadpool"}],"output":{"name":"meshfuture"}}],[11,"cache","","",36,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","",36,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"update","","",36,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",37,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"texturecomponent"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"as_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"new","","Create new `TextureComponent` from `Texture`",32,{"inputs":[{"name":"texture"}],"output":{"name":"self"}}],[11,"category","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",38,{"inputs":[{"name":"self"},{"name":"imagedata"},{"name":"threadpool"}],"output":{"name":"texturefuture"}}],[11,"cache","","",38,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","",38,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"update","","",38,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","",38,{"inputs":[{"name":"self"}],"output":null}],[6,"MeshError","","Error that can occur during mesh creation",null,null],[0,"resources","amethyst::ecs::rendering","`amethyst` rendering ecs resources",null,null],[3,"FactoryFuture","amethyst::ecs::rendering::resources","A factory future.",null,null],[3,"Factory","","The factory abstraction, which allows to access the real factory and returns futures.",null,null],[3,"AmbientColor","","The ambient color of a scene",null,null],[12,"0","","",39,null],[6,"TextureFuture","","A texture which may not have been created yet.",null,null],[6,"MaterialFuture","","A material which may not have been created yet.",null,null],[6,"MeshFuture","","A mesh which may not have been created yet.",null,null],[11,"poll","","",40,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"factory"}}],[11,"new","","Creates a new factory resource.",41,{"inputs":[],"output":{"name":"self"}}],[11,"create_mesh","","Creates a mesh asynchronously.",41,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"meshfuture"}}],[11,"create_texture","","Creates a texture asynchronously.",41,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"texturefuture"}}],[11,"create_material","","Creates a mesh asynchronously.",41,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"materialfuture"}}],[11,"execute","","Execute a closure which takes in the real factory.",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"factoryfuture"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"ambientcolor"}}],[0,"systems","amethyst::ecs::rendering","Rendering system.",null,null],[3,"RenderSystem","amethyst::ecs::rendering::systems","Rendering system.",null,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"run","","",42,null],[11,"build","","Create new `RenderSystem` It creates window and do render into it",42,null],[0,"audio","amethyst::ecs","`amethyst` audio ecs module",null,null],[0,"components","amethyst::ecs::audio","`amethyst` audio ecs components",null,null],[3,"AudioEmitter","amethyst::ecs::audio::components","An audio source, add this component to anything that emits sound.",null,null],[3,"AudioListener","","An audio listener, add this component to the local player character.",null,null],[12,"output","","Output used by this listener to emit sounds to",43,null],[12,"left_ear","","Position of the left_ear relative to the global transform on this entity.",43,null],[12,"right_ear","","Position of the right ear relative to the global transform on this entity.",43,null],[11,"new","","Creates a new AudioEmitter component initialized to the given positions. These positions will stay synced with Transform if the Transform component is available on this entity.",44,{"inputs":[],"output":{"name":"audioemitter"}}],[11,"play","","Plays an audio source from this emitter.",44,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"result"}}],[11,"set_picker","","An emitter's picker will be called by the AudioSystem whenever the emitter runs out of sounds to play.",44,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clear_picker","","Clears the previously set picker.",44,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"systems","amethyst::ecs::audio","`amethyst` audio ecs systems",null,null],[3,"AudioSystem","amethyst::ecs::audio::systems","Syncs 3D transform data with the audio engine to provide 3D audio.",null,null],[3,"DjSystem","","Calls a Dj's picker as soon as the Dj runs out of music to play.",null,null],[11,"new","","Produces a new AudioSystem that uses the given listener.",45,{"inputs":[],"output":{"name":"audiosystem"}}],[11,"run","","",45,null],[11,"run","","",46,null],[8,"SystemExt","amethyst::ecs","Extension trait for all systems.",null,null],[10,"build","","Constructs a new system with the given arguments. Registers all supported components with the World. Puts resources into World.",47,{"inputs":[{"name":"a"},{"name":"world"}],"output":{"name":"result"}}],[0,"event","amethyst","This module contains the `WindowEvent` type and re-exports glutin event types.",null,null],[4,"ElementState","amethyst::event","",null,null],[13,"Pressed","","",48,null],[13,"Released","","",48,null],[4,"Event","","",null,null],[13,"WindowEvent","","",49,null],[12,"window_id","amethyst::event::Event","",49,null],[12,"event","","",49,null],[13,"DeviceEvent","amethyst::event","",49,null],[12,"device_id","amethyst::event::Event","",49,null],[12,"event","","",49,null],[13,"Awakened","amethyst::event","",49,null],[3,"KeyboardInput","","",null,null],[12,"scancode","","Identifies the physical key pressed",50,null],[12,"state","","",50,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",50,null],[12,"modifiers","","Modifier keys active at the time of this input.",50,null],[4,"MouseButton","","",null,null],[13,"Left","","",51,null],[13,"Right","","",51,null],[13,"Middle","","",51,null],[13,"Other","","",51,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",52,null],[13,"Key2","","The '2' key over the letters.",52,null],[13,"Key3","","The '3' key over the letters.",52,null],[13,"Key4","","The '4' key over the letters.",52,null],[13,"Key5","","The '5' key over the letters.",52,null],[13,"Key6","","The '6' key over the letters.",52,null],[13,"Key7","","The '7' key over the letters.",52,null],[13,"Key8","","The '8' key over the letters.",52,null],[13,"Key9","","The '9' key over the letters.",52,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",52,null],[13,"A","","",52,null],[13,"B","","",52,null],[13,"C","","",52,null],[13,"D","","",52,null],[13,"E","","",52,null],[13,"F","","",52,null],[13,"G","","",52,null],[13,"H","","",52,null],[13,"I","","",52,null],[13,"J","","",52,null],[13,"K","","",52,null],[13,"L","","",52,null],[13,"M","","",52,null],[13,"N","","",52,null],[13,"O","","",52,null],[13,"P","","",52,null],[13,"Q","","",52,null],[13,"R","","",52,null],[13,"S","","",52,null],[13,"T","","",52,null],[13,"U","","",52,null],[13,"V","","",52,null],[13,"W","","",52,null],[13,"X","","",52,null],[13,"Y","","",52,null],[13,"Z","","",52,null],[13,"Escape","","The Escape key, next to F1.",52,null],[13,"F1","","",52,null],[13,"F2","","",52,null],[13,"F3","","",52,null],[13,"F4","","",52,null],[13,"F5","","",52,null],[13,"F6","","",52,null],[13,"F7","","",52,null],[13,"F8","","",52,null],[13,"F9","","",52,null],[13,"F10","","",52,null],[13,"F11","","",52,null],[13,"F12","","",52,null],[13,"F13","","",52,null],[13,"F14","","",52,null],[13,"F15","","",52,null],[13,"Snapshot","","Print Screen/SysRq.",52,null],[13,"Scroll","","Scroll Lock.",52,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",52,null],[13,"Insert","","`Insert`, next to Backspace.",52,null],[13,"Home","","",52,null],[13,"Delete","","",52,null],[13,"End","","",52,null],[13,"PageDown","","",52,null],[13,"PageUp","","",52,null],[13,"Left","","",52,null],[13,"Up","","",52,null],[13,"Right","","",52,null],[13,"Down","","",52,null],[13,"Back","","The Backspace key, right over Enter.",52,null],[13,"Return","","The Enter key.",52,null],[13,"Space","","The space bar.",52,null],[13,"Compose","","The \"Compose\" key on Linux.",52,null],[13,"Numlock","","",52,null],[13,"Numpad0","","",52,null],[13,"Numpad1","","",52,null],[13,"Numpad2","","",52,null],[13,"Numpad3","","",52,null],[13,"Numpad4","","",52,null],[13,"Numpad5","","",52,null],[13,"Numpad6","","",52,null],[13,"Numpad7","","",52,null],[13,"Numpad8","","",52,null],[13,"Numpad9","","",52,null],[13,"AbntC1","","",52,null],[13,"AbntC2","","",52,null],[13,"Add","","",52,null],[13,"Apostrophe","","",52,null],[13,"Apps","","",52,null],[13,"At","","",52,null],[13,"Ax","","",52,null],[13,"Backslash","","",52,null],[13,"Calculator","","",52,null],[13,"Capital","","",52,null],[13,"Colon","","",52,null],[13,"Comma","","",52,null],[13,"Convert","","",52,null],[13,"Decimal","","",52,null],[13,"Divide","","",52,null],[13,"Equals","","",52,null],[13,"Grave","","",52,null],[13,"Kana","","",52,null],[13,"Kanji","","",52,null],[13,"LAlt","","",52,null],[13,"LBracket","","",52,null],[13,"LControl","","",52,null],[13,"LMenu","","",52,null],[13,"LShift","","",52,null],[13,"LWin","","",52,null],[13,"Mail","","",52,null],[13,"MediaSelect","","",52,null],[13,"MediaStop","","",52,null],[13,"Minus","","",52,null],[13,"Multiply","","",52,null],[13,"Mute","","",52,null],[13,"MyComputer","","",52,null],[13,"NavigateForward","","",52,null],[13,"NavigateBackward","","",52,null],[13,"NextTrack","","",52,null],[13,"NoConvert","","",52,null],[13,"NumpadComma","","",52,null],[13,"NumpadEnter","","",52,null],[13,"NumpadEquals","","",52,null],[13,"OEM102","","",52,null],[13,"Period","","",52,null],[13,"PlayPause","","",52,null],[13,"Power","","",52,null],[13,"PrevTrack","","",52,null],[13,"RAlt","","",52,null],[13,"RBracket","","",52,null],[13,"RControl","","",52,null],[13,"RMenu","","",52,null],[13,"RShift","","",52,null],[13,"RWin","","",52,null],[13,"Semicolon","","",52,null],[13,"Slash","","",52,null],[13,"Sleep","","",52,null],[13,"Stop","","",52,null],[13,"Subtract","","",52,null],[13,"Sysrq","","",52,null],[13,"Tab","","",52,null],[13,"Underline","","",52,null],[13,"Unlabeled","","",52,null],[13,"VolumeDown","","",52,null],[13,"VolumeUp","","",52,null],[13,"Wake","","",52,null],[13,"WebBack","","",52,null],[13,"WebFavorites","","",52,null],[13,"WebForward","","",52,null],[13,"WebHome","","",52,null],[13,"WebRefresh","","",52,null],[13,"WebSearch","","",52,null],[13,"WebStop","","",52,null],[13,"Yen","","",52,null],[4,"WindowEvent","","",null,null],[13,"Resized","","The size of the window has changed.",53,null],[13,"Moved","","The position of the window has changed.",53,null],[13,"Closed","","The window has been closed.",53,null],[13,"DroppedFile","","A file has been dropped into the window.",53,null],[13,"HoveredFile","","A file is being hovered over the window.",53,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",53,null],[13,"ReceivedCharacter","","The window received a unicode character.",53,null],[13,"Focused","","The window gained or lost focus.",53,null],[13,"KeyboardInput","","An event from the keyboard has been received.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[12,"input","","",53,null],[13,"MouseMoved","amethyst::event","The cursor has moved on the window.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[12,"position","","",53,null],[13,"MouseEntered","amethyst::event","The cursor has entered the window.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[13,"MouseLeft","amethyst::event","The cursor has left the window.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[13,"MouseWheel","amethyst::event","A mouse wheel movement or touchpad scroll occurred.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[12,"delta","","",53,null],[12,"phase","","",53,null],[13,"MouseInput","amethyst::event","An mouse button press has been received.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[12,"state","","",53,null],[12,"button","","",53,null],[13,"TouchpadPressure","amethyst::event","Touchpad pressure event.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[12,"pressure","","",53,null],[12,"stage","","",53,null],[13,"AxisMotion","amethyst::event","Motion on some analog axis not otherwise handled. May overlap with mouse motion.",53,null],[12,"device_id","amethyst::event::WindowEvent","",53,null],[12,"axis","","",53,null],[12,"value","","",53,null],[13,"Refresh","amethyst::event","The window needs to be redrawn.",53,null],[13,"Suspended","","App has been suspended or resumed.",53,null],[13,"Touch","","Touch event has been received",53,null],[0,"prelude","amethyst","Contains common types that can be glob-imported (`*`) for convenience.",null,null],[8,"Config","amethyst::prelude","Trait implemented by the `config!` macro.",null,null],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",54,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[10,"load_no_fallback","","Loads a configuration structure from a file.",54,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"write","","Writes a configuration structure to a file.",54,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[3,"Application","","User-friendly facade for building games. Manages main loop.",null,null],[12,"engine","","The `engine` struct, holding world and thread pool.",0,null],[3,"ApplicationBuilder","","Helper builder for Applications.",null,null],[12,"events","","Allows to create `RenderSystem`",1,null],[3,"Engine","","User-facing engine handle.",null,null],[12,"delta","","Current delta time value.",2,null],[12,"pool","","Thread pool.",2,null],[12,"world","","World.",2,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",4,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",4,null],[13,"Push","","Pause the active state and push a new state onto the stack.",4,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",4,null],[13,"Quit","","Stop and remove all states and shut down the engine.",4,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",55,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[0,"timing","amethyst","Utilities for working with time.",null,null],[3,"Time","amethyst::timing","Frame timing values.",null,null],[12,"delta_time","","Time elapsed since the last frame.",56,null],[12,"fixed_step","","Rate at which `State::fixed_update` is called.",56,null],[12,"last_fixed_update","","Time at which `State::fixed_update` was last called.",56,null],[4,"Stopwatch","","A stopwatch which accurately measures elapsed time.",null,null],[13,"Waiting","","Initial state with an elapsed time value of 0 seconds.",57,null],[13,"Started","","Stopwatch has started counting the elapsed time since this `Instant` and accumuluated time from previous start/stop cycles `Duration`.",57,null],[13,"Ended","","Stopwatch has been stopped and reports the elapsed time `Duration`.",57,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"time"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"stopwatch"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"new","","Creates a new stopwatch.",57,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",57,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been started and stopped before, the new results are compounded onto the existing elapsed time value.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops measuring elapsed time.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Clears the current elapsed time value.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","amethyst","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Application with the given initial game state.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"build","","Builds a new Application with the given settings.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"run","","Starts the application and manages the game loop.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new ApplicationBuilder with the given initial game state and display configuration.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"register","","Registers a given component type.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_resource","","Adds an ECS resource which can be accessed from systems.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"add_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with","","Adds a given system `sys`, assigns it the string identifier `name`, and marks it dependent on systems `dep`. Note: all dependencies should be added before you add depending system If you want to register systems which can not be specified as dependencies, you can use \"\" as their name, which will not panic (using another name twice will).",1,null],[11,"with_thread_local","","Adds a given thread-local system `sys` to the Application.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_renderer","","Automatically registers components, adds resources and the rendering system.",1,{"inputs":[{"name":"self"},{"name":"pipelinebuilder"},{"name":"option"}],"output":{"name":"result"}}],[11,"add_store","","Add asset loader to resources",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"self"}}],[11,"register_asset","","Register new context within the loader",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Builds the Application and returns the result.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"on_start","amethyst::prelude","Executed when the game state begins.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",55,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"fmt","amethyst","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new state machine with the given initial state.",58,{"inputs":[{"name":"s"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.",58,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Passes a single event to the active state to handle.",58,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":null}],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",58,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"update","","Updates the currently active state immediately.",58,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[6,"Result","","Engine result type.",null,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","amethyst::prelude","Executed when the game state begins.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",55,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",55,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"from","amethyst::event","",51,{"inputs":[{"name":"localmousebutton"}],"output":{"name":"mousebutton"}}],[11,"from","","",52,{"inputs":[{"name":"localvirtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"default","amethyst::ecs::input","",22,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"bindings"}}],[11,"deserialize","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","amethyst::assets::formats::textures","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","amethyst::event","",48,null],[11,"hash","","",52,null],[11,"hash","","",51,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"insert_axis","amethyst::ecs::input","Assign an axis to an ID value",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"axis"}],"output":{"name":"option"}}],[11,"remove_axis","","Removes an axis, this will return the removed axis if successful.",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"axis","","Returns a reference to an axis.",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"axes","","Gets a list of all axes",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_action_binding","","Add a button to an action.",59,null],[11,"remove_action_binding","","Removes an action binding that was assigned previously.",59,null],[11,"action_bindings","","Returns an action's bindings.",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"actions","","Gets a list of all action bindings",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","Creates a new input handler.",22,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"advance_frame","","Signals that a frame has begun.",22,null],[11,"send_event","","Updates the input handler with a new engine event.",22,null],[11,"text_entered","","Returns a string representation of all text entered this frame.",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"keys_that_are","","Returns an iterator over all keys in the given state, does not support Released(Currently).",22,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"iter"}}],[11,"key_is","","Checks if a key matches the description given by state.",22,{"inputs":[{"name":"self"},{"name":"virtualkeycode"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"keys_down","","Checks if the all the given keys are down and at least one was pressed on this frame.",22,null],[11,"mouse_buttons_that_are","","Returns an iterator over all mouse buttons in the given state, does not support Released(Currently).",22,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"iter"}}],[11,"mouse_button_is","","Checks if a mouse button matches the description given by state.",22,{"inputs":[{"name":"self"},{"name":"mousebutton"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"mouse_buttons_down","","Checks if the all the given mouse buttons are down and at least one was pressed this frame.",22,null],[11,"mouse_position","","Gets the current mouse position.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_position_change","","Gets the change in position since the last frame.",22,null],[11,"buttons_that_are","","Returns an iterator over all buttons in the given state, does not support Released(Currently).",22,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"buttons"}}],[11,"button_is","","Checks if a button matches the description given by state.",22,{"inputs":[{"name":"self"},{"name":"button"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"buttons_down","","Checks if the all given buttons are being pressed and at least one was pressed this frame.",22,null],[11,"axis_value","","Returns the value of an axis by the string id, if the id doesn't exist this returns None.",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"action_is","","Returns true if any of the action is in the given state.  Returns None if an invalid action was provided.",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"buttonstate"}],"output":{"name":"option"}}],[11,"actions_down","","Checks if the all given actions are being pressed and at least one was pressed this frame.",22,null]],"paths":[[3,"Application"],[3,"ApplicationBuilder"],[3,"Engine"],[4,"Error"],[4,"Trans"],[3,"WavFormat"],[3,"OggFormat"],[3,"FlacFormat"],[4,"ImageError"],[3,"ImageData"],[3,"JpegFormat"],[3,"JpgFormat"],[3,"PngFormat"],[3,"BmpFormat"],[4,"ObjError"],[3,"ObjFormat"],[3,"Output"],[3,"OutputIterator"],[3,"AudioContext"],[3,"Dj"],[3,"Source"],[3,"DecoderError"],[3,"InputHandler"],[3,"InnerTransform"],[3,"Transform"],[3,"Child"],[3,"Init"],[3,"LocalTransform"],[3,"TransformSystem"],[3,"LightComponent"],[3,"MaterialComponent"],[3,"MeshComponent"],[3,"TextureComponent"],[4,"Vertices"],[4,"TextureError"],[3,"MeshFuture"],[3,"MeshContext"],[3,"TextureFuture"],[3,"TextureContext"],[3,"AmbientColor"],[3,"FactoryFuture"],[3,"Factory"],[3,"RenderSystem"],[3,"AudioListener"],[3,"AudioEmitter"],[3,"AudioSystem"],[3,"DjSystem"],[8,"SystemExt"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"WindowEvent"],[8,"Config"],[8,"State"],[3,"Time"],[4,"Stopwatch"],[3,"StateMachine"],[3,"Bindings"]]};
searchIndex["amethyst_assets"] = {"doc":"amethyst_assets","items":[[3,"BoxedErr","amethyst_assets","A boxed error implementing `Debug`, `Display` and `Error`.",null,null],[12,"0","","",0,null],[3,"AssetFuture","","A future for an asset",null,null],[12,"0","","",1,null],[3,"AssetSpec","","A specifier for an asset, uniquely identifying it by",null,null],[12,"ext","","The extension of this asset",2,null],[12,"name","","The name of this asset.",2,null],[12,"store","","Unique identifier indicating the Storage from which the asset was loaded.",2,null],[3,"Cache","","A basic implementation for a cache. This might be useful as the `Context` of an `Asset`, so that the same asset doesn't get imported twice.",null,null],[3,"AssetError","","Error type returned when loading an asset. Includes the `AssetSpec` and the error (`LoadError`).",null,null],[12,"asset","","The specifier of the asset which failed to load",3,null],[12,"error","","The error that's been raised.",3,null],[3,"SharedAssetError","","Shared version of error",null,null],[3,"Loader","","The asset loader, holding the contexts, the default (directory) store and a reference to the `ThreadPool`.",null,null],[3,"SpawnedFuture","","Represents a future value of an asset. This future may be added to the ECS world, where the responsible system can poll it and merge it into the persistent storage once it is `Ready`.",null,null],[3,"StoreId","","A unique store id, used to identify the storage in `AssetSpec`.",null,null],[3,"AssetPtr","","An `AssetPtr` which provides `push_update`, `update` and `is_shared` methods. These can simply be called in order to implement the `Asset` trait.",null,null],[3,"SimpleAsset","","`Asset` implementation that supports hot reloading",null,null],[12,"0","","",4,null],[3,"SimpleContext","","A simple implementation of the `Context` trait.",null,null],[3,"Directory","","Directory store.",null,null],[4,"LoadError","","Combined error type which is produced when loading an asset. This error does not include information which asset failed to load. For that, please look at `AssetError`.",null,null],[13,"AssetError","","The conversion from data -> asset failed.",5,null],[13,"FormatError","","The conversion from bytes -> data failed.",5,null],[13,"StorageError","","The storage was unable to retrieve the requested data.",5,null],[4,"NoError","","An error type which cannot be instantiated. Used as a placeholder for associated error types if something cannot fail.",null,null],[5,"load_asset","","Loads an asset with a given context, format, specifier and storage right now.",null,{"inputs":[{"name":"arc"},{"name":"f"},{"name":"n"},{"name":"storeid"},{"name":"s"},{"name":"arc"}],"output":{"name":"assetfuture"}}],[11,"from_future","","Wrap another future into `AssetFuture`",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"peek","","If any clone of this future has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this future.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"assetspec"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"new","","Creates a new asset specifier from the given parameters.",2,{"inputs":[{"name":"string"},{"name":"str"},{"name":"storeid"}],"output":{"name":"self"}}],[11,"new","","Creates a new `Cache` and initializes it with the default values.",6,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Inserts an asset, locking the internal `RwLock` to get write access to the hash map.",6,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"t"}],"output":{"name":"option"}}],[11,"get","","Retrieves an asset, locking the internal `RwLock` to get read access to the hash map. In case this asset has been inserted previously, it will be cloned and returned. Otherwise, you'll receive `None`.",6,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"access","","Accesses a cached asset, locking the internal `RwLock` to get read access to the hash map. In case the asset exists, `f` gets called with a reference to the cached asset and this method returns `true`.",6,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"f"}],"output":{"name":"option"}}],[11,"retain","","Deletes all cached values, except the ones `f` returned `true` for. May be used when you're about to clear unused assets (see `Asset::clear`).",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clear_all","","Deletes all cached values after locking the `RwLock`.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loaderror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","",8,{"inputs":[{"name":"sharederror"}],"output":{"name":"self"}}],[11,"spawn","","Creates a SpawnedFuture and starts processing it.",9,{"inputs":[{"name":"threadpool"},{"name":"f"}],"output":{"name":"self"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"storeid"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"id","","Returns a copy of the internal id.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new asset loader, initializing the directory store with the given path.",11,{"inputs":[{"name":"p"},{"name":"arc"}],"output":{"name":"self"}}],[11,"add_store","","Adds a store which can later be loaded from by supplying the same `name` to `load_from`.",11,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"register","","Registers an asset and inserts a context into the map.",11,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"reload","","Like `load_from`, but doesn't ask the cache for the asset.",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"},{"name":"s"}],"output":{"name":"assetfuture"}}],[11,"load","","Loads an asset with a given format from the default (directory) store. If you want to load from a custom source instead, use `load_from`.",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"}],"output":{"name":"assetfuture"}}],[11,"load_from","","Loads an asset with a given id and format from a custom store. The actual work is done on a worker thread, thus this method immediately returns a future.",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"},{"name":"s"}],"output":{"name":"assetfuture"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new asset pointer.",12,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"inner","","Take the inner asset.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"inner_ref","","Borrows the inner asset.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"inner_mut","","Borrows the inner asset mutably.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"is_shared","","Returns `true` if a clone of this `AssetPtr` exists.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push_update","","Pushes an update to the shared update container; this update can then be applied to all asset pointers by calling `update` on them.",12,{"inputs":[{"name":"self"},{"name":"assetfuture"}],"output":null}],[11,"update","","Applies a previously pushed update.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new `SimpleContext` from a category string and a closure which transforms data to assets.",13,{"inputs":[{"name":"c"},{"name":"t"}],"output":{"name":"self"}}],[11,"category","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",13,null],[11,"cache","","",13,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","",13,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"update","","",13,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new directory storage.",14,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"modified","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"load","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[8,"Asset","","One of the three core traits of this crate.",null,null],[16,"Context","","The `Context` type that can produce this asset",15,null],[8,"Context","","The context type which manages assets of one type. It is responsible for caching",null,null],[16,"Asset","","The asset type this context can produce.",16,null],[16,"Data","","The `Data` type the asset can be created from.",16,null],[16,"Error","","The error that may be returned from `create_asset`.",16,null],[16,"Result","","The result type for loading an asset. This can also be a future (or anything that implements `IntoFuture`).",16,null],[10,"category","","A small keyword for which category these assets belongs to.",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"create_asset","","Provides the conversion from the data format to the actual asset.",16,null],[11,"cache","","Notifies about an asset load. This is can be used to cache the asset. To return a cached asset, see the `retrieve` function.",16,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","Returns `Some` cached value if possible, otherwise `None`.",16,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[10,"update","","Updates an asset after it's been reloaded.",16,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","Gives a hint that several assets may have been released recently.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","Request for clearing the whole cache.",16,{"inputs":[{"name":"self"}],"output":null}],[8,"Format","","A format, providing a conversion from bytes to asset data, which is then in turn accepted by `Asset::from_data`. Examples for formats are `Png`, `Obj` and `Wave`.",null,null],[16,"Data","","The data type this format is able to load.",17,null],[16,"Error","","The error that may be returned from `Format::parse`.",17,null],[16,"Result","","The result of the `parse` method. Can be anything that implements `IntoFuture`.",17,null],[10,"extension","","Returns the extension (without `.`).",17,{"inputs":[],"output":{"name":"str"}}],[10,"parse","","Reads the given bytes and produces asset data.",17,null],[8,"Store","","A trait for asset stores, which provides methods for loading",null,null],[16,"Error","","The error that may occur when calling `modified` or `load`.",18,null],[16,"Result","","The result type of `load`.",18,null],[10,"modified","","This is called to check if an asset has been modified.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"load","","Loads the bytes given a category, id and extension of the asset.",18,null],[11,"new","","Creates a new boxed error.",0,{"inputs":[{"name":"t"}],"output":{"name":"boxederr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cache","","Notifies about an asset load. This is can be used to cache the asset. To return a cached asset, see the `retrieve` function.",16,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","Returns `Some` cached value if possible, otherwise `None`.",16,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"clear","","Gives a hint that several assets may have been released recently.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","Request for clearing the whole cache.",16,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"BoxedErr"],[3,"AssetFuture"],[3,"AssetSpec"],[3,"AssetError"],[3,"SimpleAsset"],[4,"LoadError"],[3,"Cache"],[4,"NoError"],[3,"SharedAssetError"],[3,"SpawnedFuture"],[3,"StoreId"],[3,"Loader"],[3,"AssetPtr"],[3,"SimpleContext"],[3,"Directory"],[8,"Asset"],[8,"Context"],[8,"Format"],[8,"Store"]]};
searchIndex["amethyst_config"] = {"doc":"Loads RON files into a structure for easy / statically typed usage.","items":[[4,"ConfigError","amethyst_config","Error related to anything that manages/creates configurations as well as \"workspace\"-related things.",null,null],[13,"File","","Forward to the `std::io::Error` error.",0,null],[13,"Parser","","Errors related to serde's parsing of configuration files.",0,null],[13,"Serializer","","Occurs if a value is ill-formed during serialization (like a poisoned mutex).",0,null],[13,"Extension","","Related to the path of the file.",0,null],[8,"Config","","Trait implemented by the `config!` macro.",null,null],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",1,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[10,"load_no_fallback","","Loads a configuration structure from a file.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"write","","Writes a configuration structure to a file.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"configerror"}}],[11,"from","","",0,{"inputs":[{"name":"deerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"sererror"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"ConfigError"],[8,"Config"]]};
searchIndex["amethyst_input"] = {"doc":"","items":[[3,"Axis","amethyst_input","Represents an emulated analogue axis made up of digital inputs, like W and S or A and D. Two of these could be analogous to a DPAD.",null,null],[12,"pos","","Positive button, when pressed down axis value will return 1 if `neg` is not pressed down.",0,null],[12,"neg","","Negative button, when pressed down axis value will return -1 if `pos` is not pressed down.",0,null],[3,"Bindings","","Used for saving and loading input settings.",null,null],[3,"InputHandler","","This struct holds state information about input devices.",null,null],[12,"bindings","","Maps inputs to actions and axes.",1,null],[3,"Buttons","","An iterator over buttons",null,null],[4,"Button","","A Button is any kind of digital input that the engine supports.",null,null],[13,"Key","","Keyboard keys",2,null],[13,"Mouse","","Mouse buttons",2,null],[4,"ButtonState","","Describes an input state for a button.",null,null],[13,"Pressed","","Button is pressed",3,null],[13,"Released","","Button is released",3,null],[4,"ChangeState","","Indicates when the ButtonState it is contained within changed",null,null],[13,"ThisFrame","","Button was either pressed or released this frame.",4,null],[13,"Currently","","Button was either pressed or released in any frame.",4,null],[11,"default","","",5,{"inputs":[],"output":{"name":"bindings"}}],[11,"insert_axis","","Assign an axis to an ID value",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"axis"}],"output":{"name":"option"}}],[11,"remove_axis","","Removes an axis, this will return the removed axis if successful.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"axis","","Returns a reference to an axis.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"axes","","Gets a list of all axes",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_action_binding","","Add a button to an action.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"button"}],"output":null}],[11,"remove_action_binding","","Removes an action binding that was assigned previously.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"button"}],"output":null}],[11,"action_bindings","","Returns an action's bindings.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"actions","","Gets a list of all action bindings",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"from","","",2,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"changestate"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"changestate"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"new","","Creates a new input handler.",1,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"advance_frame","","Signals that a frame has begun.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"send_event","","Updates the input handler with a new engine event.",1,{"inputs":[{"name":"self"},{"name":"windowevent"}],"output":null}],[11,"text_entered","","Returns a string representation of all text entered this frame.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"keys_that_are","","Returns an iterator over all keys in the given state, does not support Released(Currently).",1,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"keycodes"}}],[11,"key_is","","Checks if a key matches the description given by state.",1,{"inputs":[{"name":"self"},{"name":"virtualkeycode"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"keys_down","","Checks if the all the given keys are down and at least one was pressed on this frame.",1,null],[11,"mouse_buttons_that_are","","Returns an iterator over all mouse buttons in the given state, does not support Released(Currently).",1,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"mousebuttons"}}],[11,"mouse_button_is","","Checks if a mouse button matches the description given by state.",1,{"inputs":[{"name":"self"},{"name":"mousebutton"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"mouse_buttons_down","","Checks if the all the given mouse buttons are down and at least one was pressed this frame.",1,null],[11,"mouse_position","","Gets the current mouse position.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_position_change","","Gets the change in position since the last frame.",1,null],[11,"buttons_that_are","","Returns an iterator over all buttons in the given state, does not support Released(Currently).",1,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"buttons"}}],[11,"button_is","","Checks if a button matches the description given by state.",1,{"inputs":[{"name":"self"},{"name":"button"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"buttons_down","","Checks if the all given buttons are being pressed and at least one was pressed this frame.",1,null],[11,"axis_value","","Returns the value of an axis by the string id, if the id doesn't exist this returns None.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"action_is","","Returns true if any of the action is in the given state.  Returns None if an invalid action was provided.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"buttonstate"}],"output":{"name":"option"}}],[11,"actions_down","","Checks if the all given actions are being pressed and at least one was pressed this frame.",1,null],[6,"KeyCodes","","Iterator over keycodes",null,null],[6,"MouseButtons","","Iterator over MouseButtons",null,null],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Axis"],[3,"InputHandler"],[4,"Button"],[4,"ButtonState"],[4,"ChangeState"],[3,"Bindings"],[3,"Buttons"]]};
searchIndex["amethyst_renderer"] = {"doc":"A data parallel rendering engine developed by the [Amethyst][am] project. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[3,"Camera","amethyst_renderer","Camera struct.",null,null],[12,"eye","","Location of the camera in three-dimensional space.",0,null],[12,"proj","","Graphical projection of the camera.",0,null],[12,"forward","","Forward vector of the camera.",0,null],[12,"right","","Right vector of the camera.",0,null],[12,"up","","Upward elevation vector of the camera.",0,null],[3,"Rgba","","An RGBA color value.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[12,"3","","",1,null],[3,"Config","","Structure for holding the renderer configuration.",null,null],[12,"title","","Name of the application window.",2,null],[12,"fullscreen","","Enables or disables fullscreen mode.",2,null],[12,"dimensions","","Current window dimensions, measured in pixels (px).",2,null],[12,"min_dimensions","","Minimum window dimensions, measured in pixels (px).",2,null],[12,"max_dimensions","","Maximum window dimensions, measured in pixels (px).",2,null],[12,"vsync","","Enables or disables vertical synchronization.",2,null],[12,"multisampling","","Level of MSAA anti-aliasing.",2,null],[12,"visibility","","Sets the visibility of the window.",2,null],[3,"Mesh","","Represents a polygonal mesh.",null,null],[3,"MeshBuilder","","Builds new meshes.",null,null],[3,"Material","","Material struct.",null,null],[12,"albedo","","Diffuse map.",3,null],[12,"emission","","Emission map.",3,null],[12,"normal","","Normal map.",3,null],[12,"metallic","","Metallic map.",3,null],[12,"roughness","","Roughness map.",3,null],[12,"ambient_occlusion","","Ambient occlusion map.",3,null],[12,"caveat","","Caveat map.",3,null],[3,"MaterialBuilder","","Builds new materials.",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"Target","","A render target.",null,null],[3,"Model","","A renderable object in a scene.",null,null],[12,"material","","Material properties of the model.",4,null],[12,"mesh","","Physical geometry of the model.",4,null],[12,"pos","","Model matrix.",4,null],[3,"Scene","","Collection of lights and meshes to render.",null,null],[3,"Texture","","Handle to a GPU texture resource.",null,null],[3,"TextureBuilder","","Builds new textures.",null,null],[3,"Renderer","","Generic renderer.",null,null],[12,"factory","","The gfx factory used for creation of buffers.",5,null],[3,"RendererBuilder","","Constructs a new `Renderer`.",null,null],[4,"Projection","","The projection mode of a `Camera`.",null,null],[13,"Orthographic","","An [orthographic projection][op].",6,null],[13,"Perspective","","A realistic [perspective projection][pp].",6,null],[4,"Error","","Common renderer error type.",null,null],[13,"BufferCreation","","Failed to create a buffer.",7,null],[13,"NoSuchTarget","","A render target with the given name does not exist.",7,null],[13,"PassInit","","Failed to initialize a render pass.",7,null],[13,"PipelineCreation","","Failed to create a pipeline state object (PSO).",7,null],[13,"PoolCreation","","Failed to create thread pool.",7,null],[13,"ProgramCreation","","Failed to create and link a shader program.",7,null],[13,"ResViewCreation","","Failed to create a resource view.",7,null],[13,"TargetCreation","","Failed to create a render target.",7,null],[13,"TextureCreation","","Failed to create a texture resource.",7,null],[13,"WindowDestroyed","","The window handle associated with the renderer has been destroyed.",7,null],[0,"light","","Light sources.",null,null],[3,"DirectionalLight","amethyst_renderer::light","A directional light source.",null,null],[12,"color","","Color of the light in RGBA8 format.",8,null],[12,"direction","","Direction that the light is pointing.",8,null],[3,"PointLight","","A point light source.",null,null],[12,"center","","Location of the light source in three dimensional space.",9,null],[12,"color","","Color of the light in RGBA8 format.",9,null],[12,"intensity","","Brightness of the light source, in lumens.",9,null],[12,"radius","","Maximum radius of the point light's affected area.",9,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",9,null],[3,"SpotLight","","A spot light source.",null,null],[12,"angle","","Opening angle of the light cone.",10,null],[12,"center","","Location of the light source in three dimensional space.",10,null],[12,"color","","Color of the light in RGBA8 format.",10,null],[12,"direction","","Direction that the light is pointing.",10,null],[12,"intensity","","Brightness of the light source, in lumens.",10,null],[12,"radius","","Maximum radius of the point light's affected area.",10,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",10,null],[3,"SunLight","","A realistic disk-shaped sun light source.",null,null],[12,"ang_rad","","The sun's angular radius.",11,null],[12,"color","","Color of the light in RGBA8 format.",11,null],[12,"direction","","Direction that the light is pointing.",11,null],[12,"intensity","","Brightness of the sun light, in lux.",11,null],[4,"Light","","A light source.",null,null],[13,"Area","","An area light. FIXME: Missing implementation!",12,null],[13,"Directional","","A directional light.",12,null],[13,"Point","","A point light.",12,null],[13,"Spot","","A spot light.",12,null],[13,"Sun","","A sun light.",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"light"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"light"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"light"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"directionallight"}}],[11,"query","","",8,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"directionallight"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"directionallight"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"directionallight"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pointlight"}}],[11,"query","","",9,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"pointlight"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"pointlight"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"pointlight"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"spotlight"}}],[11,"query","","",10,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"spotlight"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"spotlight"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"spotlight"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sunlight"}}],[11,"query","","",11,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"sunlight"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"sunlight"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"sunlight"}],"output":{"name":"self"}}],[0,"pass","amethyst_renderer","Different kinds of render passes.",null,null],[3,"DrawFlat","amethyst_renderer::pass","Draw mesh without lighting",null,null],[3,"DrawPbm","","Draw mesh without lighting",null,null],[3,"DrawShaded","","Draw mesh without lighting",null,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"drawflat"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"drawflat"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"drawflat"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawFlat` pass",13,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",13,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",13,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"effect"},{"name":"scene"},{"name":"model"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"drawpbm"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"drawpbm"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"drawpbm"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawPbm` pass",14,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",14,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",14,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"effect"},{"name":"scene"},{"name":"model"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"drawshaded"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"drawshaded"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"drawshaded"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawShaded` pass",15,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",15,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",15,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"effect"},{"name":"scene"},{"name":"model"}],"output":null}],[0,"prelude","amethyst_renderer","Contains common types that can be glob-imported (`*`) for convenience.",null,null],[8,"Pod","amethyst_renderer::prelude","A trait for plain-old-data types.",null,null],[3,"Camera","","Camera struct.",null,null],[12,"eye","","Location of the camera in three-dimensional space.",0,null],[12,"proj","","Graphical projection of the camera.",0,null],[12,"forward","","Forward vector of the camera.",0,null],[12,"right","","Right vector of the camera.",0,null],[12,"up","","Upward elevation vector of the camera.",0,null],[3,"Mesh","","Represents a polygonal mesh.",null,null],[3,"MeshBuilder","","Builds new meshes.",null,null],[3,"Material","","Material struct.",null,null],[12,"albedo","","Diffuse map.",3,null],[12,"emission","","Emission map.",3,null],[12,"normal","","Normal map.",3,null],[12,"metallic","","Metallic map.",3,null],[12,"roughness","","Roughness map.",3,null],[12,"ambient_occlusion","","Ambient occlusion map.",3,null],[12,"caveat","","Caveat map.",3,null],[3,"MaterialBuilder","","Builds new materials.",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"StageBuilder","","Constructs a new rendering stage.",null,null],[3,"Target","","A render target.",null,null],[3,"Model","","A renderable object in a scene.",null,null],[12,"material","","Material properties of the model.",4,null],[12,"mesh","","Physical geometry of the model.",4,null],[12,"pos","","Model matrix.",4,null],[3,"Scene","","Collection of lights and meshes to render.",null,null],[3,"Texture","","Handle to a GPU texture resource.",null,null],[3,"TextureBuilder","","Builds new textures.",null,null],[4,"Projection","","The projection mode of a `Camera`.",null,null],[13,"Orthographic","","An [orthographic projection][op].",6,null],[13,"Perspective","","A realistic [perspective projection][pp].",6,null],[0,"pipe","amethyst_renderer","Renderer pipeline configuration.",null,null],[3,"Effect","amethyst_renderer::pipe","",null,null],[12,"pso","","",16,null],[12,"data","","",16,null],[3,"EffectBuilder","","",null,null],[3,"NewEffect","","",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"StageBuilder","","Constructs a new rendering stage.",null,null],[3,"ColorBuffer","","Target color buffer.",null,null],[12,"as_input","","Shader resource view.",17,null],[12,"as_output","","Target view.",17,null],[3,"DepthBuffer","","Target depth-stencil buffer.",null,null],[12,"as_input","","Shader resource view.",18,null],[12,"as_output","","Target view.",18,null],[3,"Target","","A render target.",null,null],[3,"TargetBuilder","","Builds new render targets.",null,null],[3,"Stages","","Immutable iterator of pipeline stages.",null,null],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",null,null],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",null,null],[4,"DepthMode","","",null,null],[13,"LessEqualTest","","",19,null],[13,"LessEqualWrite","","",19,null],[0,"pass","","Types for constructing render passes.",null,null],[3,"CompiledPass","amethyst_renderer::pipe::pass","",null,null],[8,"Pass","","",null,null],[10,"compile","","",20,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[10,"apply","","",20,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"effect"},{"name":"scene"},{"name":"model"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"compiledpass"}}],[11,"apply","","",21,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"scene"},{"name":"model"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","amethyst_renderer::pipe","",19,{"inputs":[{"name":"self"}],"output":{"name":"depthmode"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"depthmode"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"update_global","","",16,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"}],"output":null}],[11,"update_buffer","","FIXME: Update raw buffer without transmute, use `Result` somehow.",16,null],[11,"update_constant_buffer","","FIXME: Update raw buffer without transmute.",16,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"},{"name":"encoder"}],"output":null}],[11,"draw","","FIXME: Add support for arbitrary materials and textures.",16,{"inputs":[{"name":"self"},{"name":"model"},{"name":"encoder"}],"output":null}],[11,"simple","","",22,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"geom","","",22,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"tess","","",22,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"with_raw_global","","Adds a global constant to this `Effect`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_raw_constant_buffer","","Adds a raw uniform constant to this `Effect`.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_output","","Sets the output target of the PSO.",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_texture","","Adds a texture sampler to this `Effect`.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_raw_vertex_buffer","","Adds a vertex buffer to this `Effect`.",23,null],[11,"build","","TODO: Support render targets as inputs.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","amethyst_renderer","",24,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_target","","Builds a new `Stage` which outputs to the `Target` with the given name.",24,{"inputs":[{"name":"n"}],"output":{"name":"stagebuilder"}}],[11,"with_backbuffer","","Builds a new `Stage` which outputs straight into the backbuffer.",24,{"inputs":[],"output":{"name":"stagebuilder"}}],[11,"enable","","Enables the `Stage` so it will execute on every frame.",24,{"inputs":[{"name":"self"}],"output":null}],[11,"disable","","Disables the `Stage`, preventing it from being executed on every frame.",24,{"inputs":[{"name":"self"}],"output":null}],[11,"is_enabled","","Returns whether this `Stage` is enabled.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"encoders_required","","Get number of encoders needed for this stage.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","amethyst_renderer::prelude","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `StageBuilder` using the given target.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clear_target","","Clears the stage's target.",25,{"inputs":[{"name":"self"},{"name":"c"},{"name":"d"}],"output":{"name":"self"}}],[11,"with_model_pass","","Appends another `Pass` to the stage.",25,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"enabled","","Sets whether the `Stage` is turned on by default.",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone","amethyst_renderer::pipe","",17,{"inputs":[{"name":"self"}],"output":{"name":"colorbuffer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"colorbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"colorbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"depthbuffer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"depthbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"depthbuffer"}],"output":{"name":"bool"}}],[11,"clone","amethyst_renderer","",26,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"named","","Creates a new TargetBuilder with the given name.",26,{"inputs":[{"name":"n"}],"output":{"name":"targetbuilder"}}],[11,"clear_color","","Clears all color buffers to the given value.",26,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"v"}],"output":null}],[11,"clear_depth_stencil","","Clears the depth stencil buffer to the given value.",26,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"v"}],"output":null}],[11,"size","","Returns the width and height of the render target, measured in pixels.",26,null],[11,"color_buf","","Returns the color buffer with index `i`.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"color_bufs","","Returns an array slice of the render target's color buffers.",26,null],[11,"depth_buf","","Returns the render target's depth-stencil buffer, if it has one.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","amethyst_renderer::pipe","",27,{"inputs":[{"name":"self"}],"output":{"name":"targetbuilder"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new TargetBuilder.",27,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_depth_buf","","Sets whether this render target should have a depth-stencil buffer.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_num_color_bufs","","Sets how many color buffers the render target will have. This number must be greater than zero or else `build()` will fail.",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_size","","Specifies a custom target size.",27,null],[6,"Targets","","A hash map containing named render targets.",null,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"pipeline"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Builds a new renderer pipeline.",29,{"inputs":[],"output":{"name":"pipelinebuilder"}}],[11,"deferred","","Builds a default deferred pipeline.",29,{"inputs":[],"output":{"name":"pipelinebuilder"}}],[11,"forward","","Builds a default forward pipeline.",29,{"inputs":[],"output":{"name":"pipelinebuilder"}}],[11,"enabled_stages","","Iterates over all enabled stages in the pipeline.",29,{"inputs":[{"name":"self"}],"output":{"name":"stages"}}],[11,"targets","","Returns an immutable reference to all targets and their name strings.",29,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"pipelinebuilder"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new PipelineBuilder.",30,{"inputs":[],"output":{"name":"self"}}],[11,"with_target","","Constructs a new render target for this pipeline.",30,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"self"}}],[11,"with_stage","","Constructs a new stage in this pipeline.",30,{"inputs":[{"name":"self"},{"name":"stagebuilder"}],"output":{"name":"self"}}],[0,"vertex","amethyst_renderer","Built-in vertex formats.",null,null],[3,"PosColor","amethyst_renderer::vertex","Vertex format with position and RGBA8 color attributes.",null,null],[12,"a_position","","Position of the vertex in 3D space.",31,null],[12,"a_color","","RGBA color value of the vertex.",31,null],[3,"PosTex","","Vertex format with position and UV texture coordinate attributes.",null,null],[12,"a_position","","Position of the vertex in 3D space.",32,null],[12,"a_tex_coord","","UV texture coordinates used by the vertex.",32,null],[3,"PosNormTex","","Vertex format with position, normal, and UV texture coordinate attributes.",null,null],[12,"a_position","","Position of the vertex in 3D space.",33,null],[12,"a_normal","","Normal vector of the vertex.",33,null],[12,"a_tex_coord","","UV texture coordinates used by the vertex.",33,null],[3,"PosNormTangTex","","Vertex format with position, normal, and UV texture coordinate attributes.",null,null],[12,"a_position","","Position of the vertex in 3D space.",34,null],[12,"a_normal","","Normal vector of the vertex.",34,null],[12,"a_tangent","","Tangent vector of the vertex.",34,null],[12,"a_tex_coord","","UV texture coordinates used by the vertex.",34,null],[4,"Position","","Type for position attribute of vertex",null,null],[4,"Color","","Type for color attribute of vertex",null,null],[4,"TextureCoord","","Type for texture coord attribute of vertex",null,null],[4,"Normal","","Type for texture coord attribute of vertex",null,null],[4,"Tangent","","Type for tangent attribute of vertex",null,null],[6,"Attribute","","Handle to a vertex attribute.",null,null],[8,"AttributeNames","","Trait for mapping attribute type -> name",null,null],[10,"name","","Get name for specified attribute type",35,{"inputs":[],"output":{"name":"str"}}],[8,"VertexFormat","","Trait implemented by all valid vertex formats.",null,null],[16,"Attributes","","Container for attributes of this format",36,null],[16,"NamedAttributes","","Container for name+attribute pairs of this format",36,null],[10,"attributes","","Returns a list of all attributes specified in the vertex.",36,null],[10,"named_attributes","","Returns a list of all name+attribute pairs specified in the vertex. The caller provides attribute type -> Name mapping",36,null],[11,"size","","Returns the size of a single vertex in bytes.",36,{"inputs":[],"output":{"name":"usize"}}],[11,"attribute","","Returns attribute of vertex by type",36,{"inputs":[],"output":{"name":"attribute"}}],[8,"WithField","","Trait implemented by all valid vertex formats for each field",null,null],[10,"field_attribute","","Query individual attribute of the field for this format",37,{"inputs":[],"output":{"name":"attribute"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poscolor"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"poscolor"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"poscolor"}],"output":{"name":"bool"}}],[11,"query","","",31,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","",31,null],[11,"named_attributes","","",31,null],[11,"field_attribute","","",31,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",31,{"inputs":[],"output":{"name":"attribute"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"postex"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"postex"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"postex"}],"output":{"name":"bool"}}],[11,"query","","",32,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","",32,null],[11,"named_attributes","","",32,null],[11,"field_attribute","","",32,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",32,{"inputs":[],"output":{"name":"attribute"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"posnormtex"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"posnormtex"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"posnormtex"}],"output":{"name":"bool"}}],[11,"query","","",33,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","",33,null],[11,"named_attributes","","",33,null],[11,"field_attribute","","",33,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",33,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",33,{"inputs":[],"output":{"name":"attribute"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"posnormtangtex"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"posnormtangtex"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"posnormtangtex"}],"output":{"name":"bool"}}],[11,"query","","",34,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","",34,null],[11,"named_attributes","","",34,null],[11,"field_attribute","","",34,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",34,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",34,{"inputs":[],"output":{"name":"attribute"}}],[11,"field_attribute","","",34,{"inputs":[],"output":{"name":"attribute"}}],[11,"clone","amethyst_renderer","",6,{"inputs":[{"name":"self"}],"output":{"name":"projection"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"orthographic","","Creates an orthographic projection with the given left, right, top, and bottom plane distances.",6,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"projection"}}],[11,"perspective","","Creates a perspective projection with the given aspect ratio and field-of-view.",6,{"inputs":[{"name":"f32"},{"name":"d"}],"output":{"name":"projection"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"to_view_matrix","","Calculates the view matrix from the given data.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"black","","Returns a solid black color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"blue","","Returns a solid blue color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"green","","Returns a solid green color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"red","","Returns a solid red color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"transparent","","Returns a transparent color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"white","","Returns a solid white color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"get_format","","",1,null],[11,"convert","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","",7,{"inputs":[{"name":"combinederror"}],"output":{"name":"error"}}],[11,"from","","",7,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"error"}}],[11,"from","","",7,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"error"}}],[11,"from","","",7,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"from","","",7,{"inputs":[{"name":"programerror"}],"output":{"name":"error"}}],[11,"from","","",7,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"from","","",7,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"build","","Builds a new mesh from the given vertices.",38,{"inputs":[{"name":"d"}],"output":{"name":"meshbuilder"}}],[11,"attributes","","Returns a list of all vertex attributes needed by this mesh.",38,null],[11,"geometry","","Returns the mesh's vertex buffer and associated buffer slice.",38,null],[11,"transform","","Returns the transformation matrix of the mesh.",38,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"meshbuilder"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MeshBuilder` with the given vertices.",39,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"with_prim_type","","Sets the primitive type of the mesh.",39,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"self"}}],[11,"with_position","","Sets the position of the mesh in 3D space.",39,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"with_rotation","","Rotates the mesh a certain number of degrees around the given axis.",39,{"inputs":[{"name":"self"},{"name":"ax"},{"name":"an"}],"output":{"name":"self"}}],[11,"with_scale","","Scales the mesh size according to the given value.",39,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"with_transform","","Sets the transformation matrix of the mesh.",39,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"build","","Builds and returns the new mesh.",39,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"material"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"material"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"material"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"materialbuilder"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new material builder.",40,{"inputs":[],"output":{"name":"self"}}],[11,"with_albedo","","Sets the albedo to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_emission","","Sets the emission to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_normal","","Sets the normal to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_metallic","","Sets the metallic to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_roughness","","Sets the roughness to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_ambient_occlusion","","Sets the ambient_occlusion to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_caveat","","Sets the caveat to an existing texture map.",40,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"build","","Builds and returns the new material.",40,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"scene"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"scene"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"scene"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"scene"}],"output":{"name":"bool"}}],[11,"add_light","","Adds a light source to the scene.",41,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"add_model","","Adds a mesh to the scene.",41,{"inputs":[{"name":"self"},{"name":"model"}],"output":null}],[11,"add_camera","","Adds a camera to the scene.",41,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"set_ambient_color","","Set ambient color for the scene",41,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"ambient_color","","Get the ambient color for the scene",41,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"lights","","Get all lights on scene",41,null],[11,"par_iter_lights","","Iterates through all stored lights in parallel.",41,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"par_chunks_lights","","Iterates through all stored lights in parallel in chunks.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"par_iter_models","","Iterates through all stored models in parallel.",41,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"par_chunks_models","","Iterates through all stored models in parallel in chunks.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"active_camera","","Returns the active camera in the scene.",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","Remove all objects from `Scene`",41,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"model"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"model"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"model"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"from_data","","Builds a new texture with the given raw texture data.",42,{"inputs":[{"name":"d"}],"output":{"name":"texturebuilder"}}],[11,"from_color_val","","Builds a new texture with the given raw texture data.",42,{"inputs":[{"name":"c"}],"output":{"name":"texturebuilder"}}],[11,"sampler","","Returns the sampler for the texture.",42,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"view","","Returns the texture's raw shader resource view.",42,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"texturebuilder"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"bool"}}],[11,"from_color_val","","Creates a new `TextureBuilder` from the given RGBA color value.",43,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"new","","Creates a new `TextureBuilder` with the given raw texture data.",43,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"mip_levels","","Sets the number of mipmap levels to generate.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_size","","Sets the texture width and height in pixels.",43,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"dynamic","","Sets whether the texture is mutable or not.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_format","","Sets the texture format",43,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"self"}}],[11,"build","","Builds and returns the new texture.",43,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[6,"Result","","Renderer result type.",null,null],[6,"Encoder","","Command buffer encoder type.",null,null],[6,"Factory","","Graphics factory type.",null,null],[11,"new","","Creates a `Renderer` with default window settings.",5,{"inputs":[{"name":"eventsloop"}],"output":{"name":"result"}}],[11,"build","","Creates a new `RendererBuilder`, equivalent to `RendererBuilder::new()`.",5,{"inputs":[{"name":"eventsloop"}],"output":{"name":"rendererbuilder"}}],[11,"create_mesh","","Builds a new mesh from the given vertices.",5,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"result"}}],[11,"create_texture","","Builds a new texture resource.",5,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"result"}}],[11,"create_material","","Builds a new material resource.",5,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"result"}}],[11,"create_pipe","","Builds a new renderer pipeline.",5,{"inputs":[{"name":"self"},{"name":"pipelinebuilder"}],"output":{"name":"result"}}],[11,"draw","","Draws a scene with the given pipeline.",5,{"inputs":[{"name":"self"},{"name":"scene"},{"name":"pipeline"},{"name":"duration"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `RendererBuilder`.",44,{"inputs":[{"name":"eventsloop"}],"output":{"name":"self"}}],[11,"with_config","","Applies configuration from `Config`",44,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"self"}}],[11,"use_winit_builder","","Applies window settings from the given `glutin::WindowBuilder`.",44,{"inputs":[{"name":"self"},{"name":"windowbuilder"}],"output":{"name":"self"}}],[11,"with_pool","","Specifies an existing thread pool for the `Renderer` to use.",44,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"self"}}],[11,"build","","Consumes the builder and creates the new `Renderer`.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Camera"],[3,"Rgba"],[3,"Config"],[3,"Material"],[3,"Model"],[3,"Renderer"],[4,"Projection"],[4,"Error"],[3,"DirectionalLight"],[3,"PointLight"],[3,"SpotLight"],[3,"SunLight"],[4,"Light"],[3,"DrawFlat"],[3,"DrawPbm"],[3,"DrawShaded"],[3,"Effect"],[3,"ColorBuffer"],[3,"DepthBuffer"],[4,"DepthMode"],[8,"Pass"],[3,"CompiledPass"],[3,"NewEffect"],[3,"EffectBuilder"],[3,"Stage"],[3,"StageBuilder"],[3,"Target"],[3,"TargetBuilder"],[3,"Stages"],[3,"Pipeline"],[3,"PipelineBuilder"],[3,"PosColor"],[3,"PosTex"],[3,"PosNormTex"],[3,"PosNormTangTex"],[8,"AttributeNames"],[8,"VertexFormat"],[8,"WithField"],[3,"Mesh"],[3,"MeshBuilder"],[3,"MaterialBuilder"],[3,"Scene"],[3,"Texture"],[3,"TextureBuilder"],[3,"RendererBuilder"]]};
initSearch(searchIndex);
